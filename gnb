import React, { useRef, useState, useEffect } from "react";
import { Link } from "react-router-dom";
import Table from "../../../../core/common/dataTable/index";
import { exam } from "../../../../core/data/json/exam";
import {
  examOne,
  examtwo,
  startTime,
  startTimeOne,
} from "../../../../core/common/selectoption/selectoption";
import PredefinedDateRanges from "../../../../core/common/datePicker";
import { TableData } from "../../../../core/data/interface";
import CommonSelect, { Option } from "../../../../core/common/commonSelect";
import { DatePicker } from "antd";
import dayjs from "dayjs";
import { all_routes } from "../../../router/all_routes";
import TooltipOption from "../../../../core/common/tooltipOption";

interface ExamType {
  id: string;
  name: string;
  examDate: string;
  startTime: string;
  endTime: string;
  key: number;
}

const Exam = () => {
  const routes = all_routes;
  const data = exam;

  const [exams, setExams] = useState<ExamType[]>([]);
  const [modalIsOpen, setModalIsOpen] = useState(false);
  const [editingIndex, setEditingIndex] = useState<number | null>(null);
  const [newExam, setNewExam] = useState({ name: '', examDate: '', startTime: 'Select', endTime: 'Select' });
  const [examToDelete, setExamToDelete] = useState<ExamType | null>(null);
  const dropdownMenuRef = useRef<HTMLDivElement | null>(null);
  
  const today = new Date();
  const formattedDate = dayjs(today).format("DD-MM-YYYY");
  const defaultValue = dayjs(formattedDate);

  useEffect(() => {
    const fetchExams = async () => {
      try {
        const response = await fetch('http://10.10.8.14:8008/exams/exam_exam/');
        
        if (!response.ok) {
          throw new Error(`HTTP error! status: ${response.status}`);
        }
        
        const data = await response.json();
        setExams(Array.isArray(data) ? data : []);
      } catch (error) {
        console.error('Error fetching exam data:', error);
      }
    };

    fetchExams();
  }, []);

  const closeModal = () => {
    setEditingIndex(null);
    setNewExam({ name: '', examDate: '', startTime: '', endTime: '' });
    setModalIsOpen(false);
  };

  const handleChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    const { name, value } = e.target;
    setNewExam((prev) => ({ ...prev, [name]: value }));
  };

  const handleDateChange = (date: dayjs.Dayjs | null) => {
    setNewExam((prev) => ({ ...prev, examDate: date?.format("DD MMM YYYY") || "" }));
  };

  const handleSubmit = (e: React.FormEvent<HTMLFormElement>) => {
    e.preventDefault();
    
    const updatedExams = editingIndex !== null
      ? exams.map((exam, index) => 
          index === editingIndex 
          ? { ...newExam, id: exam.id, key: exam.key }
          : exam
        )
      : [...exams, { ...newExam, id: (exams.length + 1).toString(), key: exams.length + 1 }];

    setExams(updatedExams);
    closeModal();
  };

  const editExam = (exam: ExamType, index: number) => {
    setNewExam(exam);
    setEditingIndex(index);
    setModalIsOpen(true);
  };

  const handleSelectChange = (option: Option | null, field: string) => {
    setNewExam((prev) => ({ ...prev, [field]: option ? option.value : "" }));
  };

  const handleDelete = () => {
    if (examToDelete) {
      setExams(exams.filter(exam => exam.id !== examToDelete.id));
      setExamToDelete(null);
    }
  };

  const columns = [
    {
      title: "Exam Id",
      dataIndex: "exam_id",
      render: (text: string, record: any) => (
        <Link to="#" className="link-primary">{record.id}</Link>
      ),
      sorter: (a: any, b: any) => a.id.length - b.id.length,
    },
    {
      title: "Exam Type",
      dataIndex: "exam_type_name",
      sorter: (a: TableData, b: TableData) => a.examName.length - b.examName.length,
    },
    {
      title: "Academic Year",
      dataIndex: "academic_year_name",
      sorter: (a: TableData, b: TableData) => a.examDate.length - b.examDate.length,
    },
    {
      title: "Exam Name",
      dataIndex: "name",
      sorter: (a: TableData, b: TableData) => a.startTime.length - b.startTime.length,
    },
    {
      title: "Start Date",
      dataIndex: "start_date",
      sorter: (a: TableData, b: TableData) => a.endTime.length - b.endTime.length,
    },
    {
      title: "End Date",
      dataIndex: "end_date",
      sorter: (a: TableData, b: TableData) => a.endTime.length - b.endTime.length,
    },
    {
      title: "Action",
      dataIndex: "action",
      render: (text: string, record: ExamType, index: number) => (
        <div className="d-flex align-items-center">
          <div className="dropdown">
            <Link to="#" className="btn btn-white btn-icon btn-sm d-flex align-items-center justify-content-center rounded-circle p-0" data-bs-toggle="dropdown">
              <i className="ti ti-dots-vertical fs-14" />
            </Link>
            <ul className="dropdown-menu dropdown-menu-right p-3">
              <li>
                <Link className="dropdown-item rounded-1" to="#" onClick={() => editExam(record, index)}>
                  <i className="ti ti-edit-circle me-2" /> Edit
                </Link>
              </li>
              <li>
                <Link className="dropdown-item rounded-1" to="#" onClick={() => setExamToDelete(record)} data-bs-toggle="modal" data-bs-target="#delete-modal">
                  <i className="ti ti-trash-x me-2" /> Delete
                </Link>
              </li>
            </ul>
          </div>
        </div>
      ),
    },
  ];

  return (
    <div>
      <div className="page-wrapper">
        <div className="content">
          <div className="d-md-flex d-block align-items-center justify-content-between mb-3">
            <div className="my-auto mb-2">
              <h3 className="page-title mb-1">Exam</h3>
              <nav>
                <ol className="breadcrumb mb-0">
                  <li className="breadcrumb-item">
                    <Link to={routes.adminDashboard}>Dashboard</Link>
                  </li>
                  <li className="breadcrumb-item">
                    <Link to="#">Academic</Link>
                  </li>
                  <li className="breadcrumb-item active" aria-current="page">Exam</li>
                </ol>
              </nav>
            </div>
            <div className="d-flex my-xl-auto right-content align-items-center flex-wrap">
              <TooltipOption />
              <div className="mb-2">
                <Link to="#" className="btn btn-primary" data-bs-toggle="modal" data-bs-target="#add_exam" onClick={() => setModalIsOpen(true)}>
                  <i className="ti ti-square-rounded-plus-filled me-2" /> Add Exam
                </Link>
              </div>
            </div>
          </div>
          <div className="card">
            <div className="card-header d-flex align-items-center justify-content-between flex-wrap pb-0">
              <h4 className="mb-3">Exam List</h4>
              <div className="d-flex align-items-center flex-wrap">
                <div className="input-icon-start mb-3 me-2 position-relative">
                  <PredefinedDateRanges />
                </div>
                <div className="dropdown mb-3 me-2">
                  <Link to="#" className="btn btn-outline-light bg-white dropdown-toggle" data-bs-toggle="dropdown">
                    <i className="ti ti-filter me-2" /> Filter
                  </Link>
                  <div className="dropdown-menu drop-width" ref={dropdownMenuRef}>
                    <form>
                      <div className="d-flex align-items-center border-bottom p-3">
                        <h4>Filter</h4>
                      </div>
                      <div className="p-3 border-bottom pb-0">
                        <div className="row">
                          <div className="col-md-12">
                            <div className="mb-3">
                              <label className="form-label">Exam Name</label>
                              <CommonSelect className="select" options={examtwo} />
                            </div>
                          </div>
                          <div className="col-md-12">
                            <div className="mb-3">
                              <label className="form-label">Exam Date</label>
                              <DatePicker onChange={handleDateChange} defaultValue={defaultValue} />
                            </div>
                          </div>
                        </div>
                      </div>
                      <div className="p-3 text-end">
                        <button className="btn btn-secondary me-2" type="button" data-bs-dismiss="modal">
                          Cancel
                        </button>
                        <button className="btn btn-primary" type="submit">
                          Apply
                        </button>
                      </div>
                    </form>
                  </div>
                </div>
              </div>
            </div>
            <div className="card-body pt-0">
              <Table columns={columns} dataSource={exams} />
            </div>
          </div>
        </div>
      </div>

      {/* Add/Edit Exam Modal */}
      <div className={`modal fade ${modalIsOpen ? 'show' : ''}`} id="add_exam" tabIndex={-1} aria-labelledby="add_exam_label" aria-hidden={!modalIsOpen}>
        <div className="modal-dialog">
          <div className="modal-content">
            <div className="modal-header">
              <h5 className="modal-title" id="add_exam_label">{editingIndex !== null ? 'Edit Exam' : 'Add Exam'}</h5>
              <button type="button" className="btn-close" data-bs-dismiss="modal" aria-label="Close" onClick={closeModal}></button>
            </div>
            <form onSubmit={handleSubmit}>
              <div className="modal-body">
                <div className="row">
                  <div className="col-md-12">
                    <div className="mb-3">
                      <label className="form-label">Exam Name</label>
                      <input
                        type="text"
                        className="form-control"
                        onChange={handleChange}
                        value={newExam.name}
                        name="name"
                      />
                    </div>
                    <div className="mb-3">
                      <label className="form-label">Exam Date</label>
                      <DatePicker onChange={handleDateChange} />
                    </div>
                    <div className="mb-3">
                      <label className="form-label">Start Time</label>
                      <CommonSelect className="select" options={startTime} onChange={(option) => handleSelectChange(option, 'startTime')} />
                    </div>
                    <div className="mb-3">
                      <label className="form-label">End Time</label>
                      <CommonSelect className="select" options={startTime} onChange={(option) => handleSelectChange(option, 'endTime')} />
                    </div>
                  </div>
                </div>
              </div>
              <div className="modal-footer">
                <Link to="#" className="btn btn-light me-2" data-bs-dismiss="modal" onClick={closeModal}>
                  Cancel
                </Link>
                <button className="btn btn-primary" type="submit">
                  {editingIndex !== null ? 'Save Changes' : 'Add Exam'}
                </button>
              </div>
            </form>
          </div>
        </div>
      </div>

      {/* Delete Exam Modal */}
      <div className="modal fade" id="delete-modal" tabIndex={-1} aria-labelledby="delete-modal_label" aria-hidden="true">
        <div className="modal-dialog">
          <div className="modal-content">
            <form onSubmit={(e) => { e.preventDefault(); handleDelete(); }}>
              <div className="modal-body text-center">
                <span className="delete-icon">
                  <i className="ti ti-trash-x" />
                </span>
                <h4>Confirm Deletion</h4>
                <p>
                  You want to delete the exam "{examToDelete?.name}"? This action cannot be undone.
                </p>
                <div className="d-flex justify-content-center">
                  <Link to="#" className="btn btn-light me-3" data-bs-dismiss="modal">
                    Cancel
                  </Link>
                  <button type="submit" className="btn btn-danger">
                    Yes, Delete
                  </button>
                </div>
              </div>
            </form>
          </div>
        </div>
      </div>
    </div>
  );
};

export default Exam;
