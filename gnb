import React, { useRef, useState, useEffect } from "react";
import { Link } from "react-router-dom";
import Table from "../../../../core/common/dataTable/index";
import {
  examOne,
  examtwo,
  startTime,
  startTimeOne,
} from "../../../../core/common/selectoption/selectoption";
import PredefinedDateRanges from "../../../../core/common/datePicker";
import CommonSelect, { Option } from "../../../../core/common/commonSelect";
import { DatePicker } from "antd";
import dayjs from "dayjs";
import { all_routes } from "../../../router/all_routes";
import TooltipOption from "../../../../core/common/tooltipOption";

interface Exam1 {
  id: string;
  key: number;
  examName: string;
  examDate: string;
  startTime: string;
  endTime: string;
}

const Exam = () => {
  const routes = all_routes;
  const [data, setData] = useState<Exam1[]>([
    { id: "1", key: 1, examName: "Sample Exam", examDate: "01-01-2024", startTime: "10:00 AM", endTime: "12:00 PM" },
  ]);
  
  useEffect(() => {
    const storedExams = localStorage.getItem('exams');
    if (storedExams) {
      setData(JSON.parse(storedExams));
    }
  }, []);

  const [newExam, setNewExam] = useState({
    examName: "",
    examDate: dayjs().format("DD-MM-YYYY"),
    startTime: "",
    endTime: "",
  });
  
  const [currentExam, setCurrentExam] = useState<Exam1 | null>(null);
  const [examToDelete, setExamToDelete] = useState<Exam1 | null>(null);
  
  const dropdownMenuRef = useRef<HTMLDivElement | null>(null);

  const handleInputChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    const { name, value } = e.target;
    setNewExam({ ...newExam, [name]: value });
  };

  const handleAddExam = (e: React.FormEvent<HTMLFormElement>) => {
    e.preventDefault();
    const examWithId: Exam1 = {
      id: String(data.length + 1),
      key: data.length + 1,
      ...newExam,
    };
    const updatedData = [...data, examWithId];
    setData(updatedData);
    localStorage.setItem('exams', JSON.stringify(updatedData));
    setNewExam({ examName: "", examDate: dayjs().format("DD-MM-YYYY"), startTime: "", endTime: "" });
  };

  const handleEditExam = (e: React.FormEvent<HTMLFormElement>) => {
    e.preventDefault();
    if (currentExam) {
      const updatedData = data.map(exam => 
        exam.id === currentExam.id ? currentExam : exam
      );
      setData(updatedData);
      localStorage.setItem('exams', JSON.stringify(updatedData));
      setCurrentExam(null);
    }
  };

  const handleDeleteExam = () => {
    if (examToDelete) {
      const updatedData = data.filter(exam => exam.id !== examToDelete.id);
      setData(updatedData);
      localStorage.setItem('exams', JSON.stringify(updatedData));
      setExamToDelete(null);
    }
  };

  const columns = [
    {
      title: "ID",
      dataIndex: "id",
      render: (_: any, record: { id: string }) => (
        <Link to="#" className="link-primary">
          {record.id}
        </Link>
      ),
    },
    {
      title: "Exam Name",
      dataIndex: "examName",
    },
    {
      title: "Exam Date",
      dataIndex: "examDate",
    },
    {
      title: "Start Time",
      dataIndex: "startTime",
    },
    {
      title: "End Time",
      dataIndex: "endTime",
    },
    {
      title: "Action",
      dataIndex: "action",
      render: (text: any, record: Exam1) => (
        <div className="d-flex align-items-center">
          <div className="dropdown">
            <Link
              to="#"
              className="btn btn-white btn-icon btn-sm d-flex align-items-center justify-content-center rounded-circle p-0"
              data-bs-toggle="dropdown"
            >
              <i className="ti ti-dots-vertical fs-14" />
            </Link>
            <ul className="dropdown-menu dropdown-menu-right p-3">
              <li>
                <Link
                  className="dropdown-item rounded-1"
                  to="#"
                  data-bs-toggle="modal"
                  data-bs-target="#edit_exam"
                  onClick={() => setCurrentExam(record)} // Set the exam to edit
                >
                  <i className="ti ti-edit-circle me-2" />
                  Edit
                </Link>
              </li>
              <li>
                <Link
                  className="dropdown-item rounded-1"
                  to="#"
                  data-bs-toggle="modal"
                  data-bs-target="#delete-modal"
                  onClick={() => setExamToDelete(record)} // Set the exam to delete
                >
                  <i className="ti ti-trash-x me-2" />
                  Delete
                </Link>
              </li>
            </ul>
          </div>
        </div>
      ),
    },
  ];

  return (
    <div>
      <div className="page-wrapper">
        <div className="content">
          <div className="d-md-flex d-block align-items-center justify-content-between mb-3">
            <div className="my-auto mb-2">
              <h3 className="page-title mb-1">Exam</h3>
              <nav>
                <ol className="breadcrumb mb-0">
                  <li className="breadcrumb-item">
                    <Link to={routes.adminDashboard}>Dashboard</Link>
                  </li>
                  <li className="breadcrumb-item">
                    <Link to="#">Academic</Link>
                  </li>
                  <li className="breadcrumb-item active" aria-current="page">
                    Exam
                  </li>
                </ol>
              </nav>
            </div>
            <div className="d-flex my-xl-auto right-content align-items-center flex-wrap">
              <TooltipOption />
              <div className="mb-2">
                <Link
                  to="#"
                  className="btn btn-primary"
                  data-bs-toggle="modal"
                  data-bs-target="#add_exam"
                >
                  <i className="ti ti-square-rounded-plus-filled me-2" />
                  Add Exam
                </Link>
              </div>
            </div>
          </div>

          <div className="card">
            <div className="card-header d-flex align-items-center justify-content-between flex-wrap pb-0">
              <h4 className="mb-3">Exam List</h4>
            </div>
            <div className="card-body p-0 py-3">
              <Table columns={columns} dataSource={data} Selection={true} />
            </div>
          </div>
        </div>
      </div>

      {/* Add Exam Modal */}
      <div className="modal fade" id="add_exam">
        <div className="modal-dialog modal-dialog-centered">
          <div className="modal-content">
            <div className="modal-header">
              <h4 className="modal-title">Add Exam</h4>
              <button
                type="button"
                className="btn-close custom-btn-close"
                data-bs-dismiss="modal"
                aria-label="Close"
              >
                <i className="ti ti-x" />
              </button>
            </div>
            <form onSubmit={handleAddExam}>
              <div className="modal-body">
                <div className="row">
                  <div className="col-md-12">
                    <div className="mb-3">
                      <label className="form-label">Exam Name</label>
                      <input
                        type="text"
                        className="form-control"
                        name="examName"
                        value={newExam.examName}
                        onChange={handleInputChange}
                        required
                      />
                    </div>
                    <div className="mb-3">
                      <label className="form-label">Exam Date</label>
                      <DatePicker
                        className="form-control datetimepicker"
                        format={"DD-MM-YYYY"}
                        defaultValue={dayjs(newExam.examDate, "DD-MM-YYYY")}
                        onChange={(date) => setNewExam({ ...newExam, examDate: dayjs(date).format("DD-MM-YYYY") })}
                      />
                    </div>
                    <div className="mb-3">
                      <label className="form-label">Start Time</label>
                      <CommonSelect
                        className="select"
                        options={startTime}
                        onChange={(option) => setNewExam({ ...newExam, startTime: option ? option.value : "" })}
                      />
                    </div>
                    <div className="mb-0">
                      <label className="form-label">End Time</label>
                      <CommonSelect
                        className="select"
                        options={startTimeOne}
                        onChange={(option) => setNewExam({ ...newExam, endTime: option ? option.value : "" })}
                      />
                    </div>
                  </div>
                </div>
              </div>
              <div className="modal-footer">
                <button
                  type="button"
                  className="btn btn-secondary"
                  data-bs-dismiss="modal"
                >
                  Close
                </button>
                <button type="submit" className="btn btn-primary">
                  Add Exam
                </button>
              </div>
            </form>
          </div>
        </div>
      </div>

      {/* Edit Exam Modal */}
      <div className="modal fade" id="edit_exam">
        <div className="modal-dialog modal-dialog-centered">
          <div className="modal-content">
            <div className="modal-header">
              <h4 className="modal-title">Edit Exam</h4>
              <button
                type="button"
                className="btn-close custom-btn-close"
                data-bs-dismiss="modal"
                aria-label="Close"
              >
                <i className="ti ti-x" />
              </button>
            </div>
            {currentExam && (
              <form onSubmit={handleEditExam}>
                <div className="modal-body">
                  <div className="row">
                    <div className="col-md-12">
                      <div className="mb-3">
                        <label className="form-label">Exam Name</label>
                        <input
                          type="text"
                          className="form-control"
                          value={currentExam.examName}
                          onChange={(e) => setCurrentExam({ ...currentExam, examName: e.target.value })}
                          required
                        />
                      </div>
                      <div className="mb-3">
                        <label className="form-label">Exam Date</label>
                        <DatePicker
                          className="form-control datetimepicker"
                          format={"DD-MM-YYYY"}
                          defaultValue={dayjs(currentExam.examDate, "DD-MM-YYYY")}
                          onChange={(date) => setCurrentExam({ ...currentExam, examDate: dayjs(date).format("DD-MM-YYYY") })}
                        />
                      </div>
                      <div className="mb-3">
                        <label className="form-label">Start Time</label>
                        <CommonSelect
                          className="select"
                          options={startTime}
                          value={currentExam.startTime}
                          onChange={(option) => setCurrentExam({ ...currentExam, startTime: option ? option.value : "" })}
                        />
                      </div>
                      <div className="mb-0">
                        <label className="form-label">End Time</label>
                        <CommonSelect
                          className="select"
                          options={startTimeOne}
                          value={currentExam.endTime}
                          onChange={(option) => setCurrentExam({ ...currentExam, endTime: option ? option.value : "" })}
                        />
                      </div>
                    </div>
                  </div>
                </div>
                <div className="modal-footer">
                  <button
                    type="button"
                    className="btn btn-secondary"
                    data-bs-dismiss="modal"
                  >
                    Close
                  </button>
                  <button type="submit" className="btn btn-primary">
                    Update Exam
                  </button>
                </div>
              </form>
            )}
          </div>
        </div>
      </div>

      {/* Delete Exam Modal */}
      <div className="modal fade" id="delete-modal">
        <div className="modal-dialog modal-dialog-centered">
          <div className="modal-content">
            <div className="modal-header">
              <h4 className="modal-title">Delete Exam</h4>
              <button
                type="button"
                className="btn-close custom-btn-close"
                data-bs-dismiss="modal"
                aria-label="Close"
              >
                <i className="ti ti-x" />
              </button>
            </div>
            <div className="modal-body">
              <p>Are you sure you want to delete this exam?</p>
            </div>
            <div className="modal-footer">
              <button
                type="button"
                className="btn btn-secondary"
                data-bs-dismiss="modal"
              >
                Close
              </button>
              <Link className="btn btn-danger" to="#" onClick={handleDeleteExam} data-bs-dismiss="modal">
                Delete
              </Link>
            </div>
          </div>
        </div>
      </div>
    </div>
  );
};

export default Exam;
