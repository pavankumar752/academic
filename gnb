import React, { useRef, useState } from "react";
import { Link } from "react-router-dom";
import Table from "../../../../core/common/dataTable/index";
import { exam } from "../../../../core/data/json/exam";
import { startTime, startTimeOne } from "../../../../core/common/selectoption/selectoption";
import PredefinedDateRanges from "../../../../core/common/datePicker";
import { DatePicker } from "antd";
import dayjs from "dayjs";
import { all_routes } from "../../../router/all_routes";
import CommonSelect, { Option } from "../../../../core/common/commonSelect";
import TooltipOption from "../../../../core/common/tooltipOption";

const Exam = () => {
  const routes = all_routes;
  const data = exam;
  const [exams, setExams] = useState(data);
  const [modalIsOpen, setModalIsOpen] = useState(false);
  const [editingIndex, setEditingIndex] = useState<number | null>(null);
  const [newExam, setNewExam] = useState({
    id: "",
    examName: "",
    examDate: "",
    startTime: "",
    endTime: "",
  });

  const handleChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    const { name, value } = e.target;
    setNewExam((prev) => ({ ...prev, [name]: value }));
  };

  const handleDateChange = (date: dayjs.Dayjs | null) => {
    setNewExam((prev) => ({ ...prev, examDate: date?.format("DD-MM-YYYY") || "" }));
  };

  const handleSelectChange = (option: Option | null, field: string) => {
    setNewExam((prev) => ({
      ...prev,
      [field]: option ? option.label : "",
    }));
  };

  const handleSubmit = (e: React.FormEvent<HTMLFormElement>) => {
    e.preventDefault();
    const updatedExams = editingIndex !== null
      ? exams.map((exam, index) => (index === editingIndex ? newExam : exam))
      : [...exams, { ...newExam, id: (exams.length + 1).toString() }]; // Generate ID based on current length

    setExams(updatedExams);
    closeModal();
  };

  const closeModal = () => {
    setEditingIndex(null);
    setNewExam({
      id: "",
      examName: "",
      examDate: "",
      startTime: "",
      endTime: "",
    });
    setModalIsOpen(false);
  };

  return (
    <div>
      {/* Other components like Table and Header */}
      
      {/* Add Exam Modal */}
      <div className="modal fade" id="add_exam">
        <div className="modal-dialog modal-dialog-centered">
          <div className="modal-content">
            <div className="modal-header">
              <h4 className="modal-title">{editingIndex !== null ? "Edit Exam" : "Add Exam"}</h4>
              <button type="button" className="btn-close" data-bs-dismiss="modal" aria-label="Close" />
            </div>
            <form onSubmit={handleSubmit}>
              <div className="modal-body">
                <div className="mb-3">
                  <label className="form-label">Exam Name</label>
                  <input
                    type="text"
                    name="examName"
                    value={newExam.examName}
                    onChange={handleChange}
                    className="form-control"
                    required
                  />
                </div>
                <div className="mb-3">
                  <label className="form-label">Exam Date</label>
                  <DatePicker
                    format="DD-MM-YYYY"
                    onChange={handleDateChange}
                    className="form-control"
                    placeholder="Select Date"
                    value={newExam.examDate ? dayjs(newExam.examDate, "DD-MM-YYYY") : null}
                  />
                </div>
                <div className="mb-3">
                  <label className="form-label">Start Time</label>
                  <CommonSelect
                    className="select"
                    options={startTime}
                    onChange={(option) => handleSelectChange(option, "startTime")}
                    value={startTime.find((option) => option.label === newExam.startTime)}
                  />
                </div>
                <div className="mb-0">
                  <label className="form-label">End Time</label>
                  <CommonSelect
                    className="select"
                    options={startTimeOne}
                    onChange={(option) => handleSelectChange(option, "endTime")}
                    value={startTimeOne.find((option) => option.label === newExam.endTime)}
                  />
                </div>
              </div>
              <div className="modal-footer">
                <Link to="#" className="btn btn-light" data-bs-dismiss="modal">Cancel</Link>
                <button type="submit" className="btn btn-primary">{editingIndex !== null ? "Save Changes" : "Add Exam"}</button>
              </div>
            </form>
          </div>
        </div>
      </div>
    </div>
  );
};

export default Exam;
