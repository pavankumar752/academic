const createInputColumn = (subject: string) => ({
  title: subject.charAt(0).toUpperCase() + subject.slice(1),
  dataIndex: subject,
  render: (text: string, record: any, index: number) => (
    <input
      type="number"
      value={text}
      onChange={(e) => handleInputChange(index, subject, e.target.value)}
      className={`form-control ${text === "30" ? "text-danger" : ""}`}
    />
  ),
  sorter: (a: TableData, b: TableData) => a[subject].length - b[subject].length,
});

const columns = [
  {
    title: "Admission No",
    dataIndex: "admissionNo",
    render: (text: string, record: any) => (
      <Link to="#" className="link-primary">{record.admissionNo}</Link>
    ),
    sorter: (a: TableData, b: TableData) => a.admissionNo.length - b.admissionNo.length,
  },
  {
    title: "Student Name",
    dataIndex: "studentName",
    render: (text: string, record: any) => (
      <div className="d-flex align-items-center">
        <Link to={routes.studentDetail} className="avatar avatar-md">
          <ImageWithBasePath src={record.img} className="img-fluid rounded-circle" alt="img" />
        </Link>
        <div className="ms-2">
          <p className="text-dark mb-0">
            <Link to={routes.studentDetail}>{text}</Link>
          </p>
          <span className="fs-12">{record.roll}</span>
        </div>
      </div>
    ),
    sorter: (a: TableData, b: TableData) => a.studentName.length - b.studentName.length,
  },
  createInputColumn("english"),
  createInputColumn("spanish"),
  createInputColumn("physics"),
  createInputColumn("chemistry"),
  createInputColumn("maths"),
  createInputColumn("computer"),
  createInputColumn("envScience"),
  {
    title: "Total",
    sorter: (a: TableData, b: TableData) => a.total.length - b.total.length,
  },
  {
    title: "Percent",
    sorter: (a: TableData, b: TableData) => a.percent.length - b.percent.length,
  },
  {
    title: "Grade",
    sorter: (a: TableData, b: TableData) => a.grade.length - b.grade.length,
  },
  {
    title: "Result",
    dataIndex: "Pass",
    render: (text: string) => (
      <span className={`badge badge-soft-${text === "Pass" ? "success" : "danger"} d-inline-flex align-items-center`}>
        <i className="ti ti-circle-filled fs-5 me-1"></i>
        {text}
      </span>
    ),
    sorter: (a: TableData, b: TableData) => a.result.length - b.result.length,
  },
];
