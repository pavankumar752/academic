import React, { useRef, useState, useEffect } from "react";
import { Link } from "react-router-dom";
import Table from "../../../../core/common/dataTable/index";
import {
  examOne,
  examtwo,
  startTime,
  startTimeOne,
} from "../../../../core/common/selectoption/selectoption";
import PredefinedDateRanges from "../../../../core/common/datePicker";
import CommonSelect, { Option } from "../../../../core/common/commonSelect";
import { DatePicker } from "antd";
import dayjs from "dayjs";
import { all_routes } from "../../../router/all_routes";
import TooltipOption from "../../../../core/common/tooltipOption";

interface Exam1 {
  id: string;
  key: number;
  examName: string;
  examDate: string;
  startTime: string;
  endTime: string;
}

const Exam = () => {
  const routes = all_routes;
  const [data, setData] = useState<Exam1[]>([
    { id: "1", key: 1, examName: "Sample Exam", examDate: "01-01-2024", startTime: "10:00 AM", endTime: "12:00 PM" },
  ]);
  const [newExam, setNewExam] = useState({
    examName: "",
    examDate: dayjs().format("DD-MM-YYYY"),
    startTime: "",
    endTime: "",
  });
  const [editExam, setEditExam] = useState<Exam1 | null>(null);

  useEffect(() => {
    const storedExams = localStorage.getItem('exams');
    if (storedExams) {
      setData(JSON.parse(storedExams));
    }
  }, []);

  const handleInputChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    const { name, value } = e.target;
    setNewExam({ ...newExam, [name]: value });
  };

  const handleEditInputChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    const { name, value } = e.target;
    if (editExam) {
      setEditExam({ ...editExam, [name]: value });
    }
  };

  const handleAddExam = (e: React.FormEvent<HTMLFormElement>) => {
    e.preventDefault();
    const examWithId: Exam1 = {
      id: String(data.length + 1),
      key: data.length + 1,
      ...newExam,
    };
    const updatedData = [...data, examWithId];
    setData(updatedData);
    localStorage.setItem('exams', JSON.stringify(updatedData));
    setNewExam({ examName: "", examDate: dayjs().format("DD-MM-YYYY"), startTime: "", endTime: "" });
  };

  const handleEditExamSubmit = (e: React.FormEvent<HTMLFormElement>) => {
    e.preventDefault();
    if (editExam) {
      const updatedData = data.map((exam) =>
        exam.id === editExam.id ? { ...exam, ...editExam } : exam
      );
      setData(updatedData);
      localStorage.setItem('exams', JSON.stringify(updatedData));
      setEditExam(null); // Close the modal
    }
  };

  const handleStartTimeChange = (option: Option | null) => {
    if (editExam) {
      setEditExam({ ...editExam, startTime: option ? option.value : "" });
    }
  };

  const handleEndTimeChange = (option: Option | null) => {
    if (editExam) {
      setEditExam({ ...editExam, endTime: option ? option.value : "" });
    }
  };

  const openEditModal = (exam: Exam1) => {
    setEditExam(exam);
  };

  // Define table columns
  const columns = [
    {
      title: "ID",
      dataIndex: "id",
      render: (_: any, record: { id: string }) => (
        <Link to="#" className="link-primary">
          {record.id}
        </Link>
      ),
      sorter: (a: { id: string }, b: { id: string }) => a.id.length - b.id.length,
    },
    {
      title: "Exam Name",
      dataIndex: "examName",
      sorter: (a: { examName: string }, b: { examName: string }) =>
        a.examName.length - b.examName.length,
    },
    {
      title: "Exam Date",
      dataIndex: "examDate",
      sorter: (a: { examDate: string }, b: { examDate: string }) =>
        a.examDate.length - b.examDate.length,
    },
    {
      title: "Start Time",
      dataIndex: "startTime",
      sorter: (a: { startTime: string }, b: { startTime: string }) =>
        a.startTime.length - b.startTime.length,
    },
    {
      title: "End Time",
      dataIndex: "endTime",
      sorter: (a: { endTime: string }, b: { endTime: string }) =>
        a.endTime.length - b.endTime.length,
    },
    {
      title: "Action",
      dataIndex: "action",
      render: (_: any, record: Exam1) => (  // Define 'record' as Exam1 type
        <div className="d-flex align-items-center">
          <div className="dropdown">
            <Link
              to="#"
              className="btn btn-white btn-icon btn-sm"
              data-bs-toggle="dropdown"
            >
              <i className="ti ti-dots-vertical fs-14" />
            </Link>
            <ul className="dropdown-menu dropdown-menu-right">
              <li>
                <Link
                  className="dropdown-item"
                  to="#"
                  onClick={() => openEditModal(record)}
                  data-bs-toggle="modal"
                  data-bs-target="#edit_exam"
                >
                  <i className="ti ti-edit-circle me-2" />
                  Edit
                </Link>
              </li>
              <li>
                <Link className="dropdown-item" to="#">
                  <i className="ti ti-trash-x me-2" />
                  Delete
                </Link>
              </li>
            </ul>
          </div>
        </div>
      ),
    },
  ];

  return (
    <div>
      <div className="page-wrapper">
        <div className="content">
          <div className="d-md-flex d-block align-items-center justify-content-between mb-3">
            <h3 className="page-title mb-1">Exam</h3>
            <div className="d-flex my-xl-auto right-content align-items-center flex-wrap">
              <TooltipOption />
              <div className="mb-2">
                <Link
                  to="#"
                  className="btn btn-primary"
                  data-bs-toggle="modal"
                  data-bs-target="#add_exam"
                >
                  <i className="ti ti-square-rounded-plus-filled me-2" />
                  Add Exam
                </Link>
              </div>
            </div>
          </div>

          <div className="card">
            <div className="card-header">
              <h4 className="mb-3">Exam List</h4>
            </div>
            <div className="card-body p-0 py-3">
              <Table columns={columns} dataSource={data} Selection={true} />
            </div>
          </div>
        </div>
      </div>

      {/* Add Exam Modal */}
      <div className="modal fade" id="add_exam">
        <div className="modal-dialog modal-dialog-centered">
          <div className="modal-content">
            <div className="modal-header">
              <h4 className="modal-title">Add Exam</h4>
              <button
                type="button"
                className="btn-close custom-btn-close"
                data-bs-dismiss="modal"
                aria-label="Close"
              >
                <i className="ti ti-x" />
              </button>
            </div>
            <form onSubmit={handleAddExam}>
              <div className="modal-body">
                <div className="mb-3">
                  <label className="form-label">Exam Name</label>
                  <input
                    type="text"
                    className="form-control"
                    name="examName"
                    value={newExam.examName}
                    onChange={handleInputChange}
                    required
                  />
                </div>
                <div className="mb-3">
                  <label className="form-label">Exam Date</label>
                  <div className="date-pic">
                    <DatePicker
                      className="form-control datetimepicker"
                      format={"DD-MM-YYYY"}
                      placeholder="16 May 2024"
                      onChange={(date) => setNewExam({ ...newExam, examDate: dayjs(date).format("DD-MM-YYYY") })}
                    />
                    <span className="cal-icon">
                      <i className="ti ti-calendar" />
                    </span>
                  </div>
                </div>
                <div className="mb-3">
                  <label className="form-label">Start Time</label>
                  <CommonSelect
                    className="select"
                    options={startTime}
                    onChange={handleStartTimeChange}
                  />
                </div>
                <div className="mb-0">
                  <label className="form-label">End Time</label>
                  <CommonSelect
                    className="select"
                    options={startTimeOne}
                    onChange={handleEndTimeChange}
                  />
                </div>
              </div>
              <div className="modal-footer">
                <Link to="#" className="btn btn-light me-2" data-bs-dismiss="modal">Cancel</Link>
                <button type="submit" className="btn btn-primary">Add Exam</button>
              </div>
            </form>
          </div>
        </div>
      </div>

      {/* Edit Exam Modal */}
      <div className="modal fade" id="edit_exam">
        <div className="modal-dialog modal-dialog-centered">
          <div className="modal-content">
            <div className="modal-header">
              <h4 className="modal-title">Edit Exam</h4>
              <button
                type="button"
                className="btn-close"
                data-bs-dismiss="modal"
              >
                <i className="ti ti-x" />
              </button>
            </div>
            <form onSubmit={handleEditExamSubmit}>
              <div className="modal-body">
                {editExam && (
                  <>
                    <div className="mb-3">
                      <label className="form-label">Exam Name</label>
                      <input
                        type="text"
                        className="form-control"
                        name="examName"
                        value={editExam.examName}
                        onChange={handleEditInputChange}
                        required
                      />
                    </div>
                    <div className="mb-3">
                      <label className="form-label">Exam Date</label>
                      <DatePicker
                        className="form-control"
                        format={"DD-MM-YYYY"}
                        value={dayjs(editExam.examDate, "DD-MM-YYYY")}
                        onChange={(date) => setEditExam({ ...editExam, examDate: dayjs(date).format("DD-MM-YYYY") })}
                      />
                    </div>
                    <div className="mb-3">
                      <label className="form-label">Start Time</label>
                      <CommonSelect
                        className="select"
                        options={startTime}
                        onChange={handleStartTimeChange}
                      />
                    </div>
                    <div className="mb-0">
                      <label className="form-label">End Time</label>
                      <CommonSelect
                        className="select"
                        options={startTimeOne}
                        onChange={handleEndTimeChange}
                      />
                    </div>
                  </>
                )}
              </div>
              <div className="modal-footer">
                <Link to="#" className="btn btn-light" data-bs-dismiss="modal">Cancel</Link>
                <button type="submit" className="btn btn-primary">Save Changes</button>
              </div>
            </form>
          </div>
        </div>
      </div>

      {/* Delete Exam Modal */}
      <div className="modal fade" id="delete-modal">
        <div className="modal-dialog modal-dialog-centered">
          <div className="modal-content">
            <div className="modal-body text-center">
              <i className="ti ti-trash-x fs-50 my-3 text-danger" />
              <h4>Are you sure you want to delete this exam?</h4>
              <div className="d-flex justify-content-center">
                <Link className="btn btn-light me-3" to="#" data-bs-dismiss="modal">Cancel</Link>
                <Link className="btn btn-primary" to="#" data-bs-dismiss="modal">Delete</Link>
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>
  );
};

export default Exam;
