import React, { useRef, useState, useEffect } from "react";
import { Link } from "react-router-dom";
import Table from "../../../../core/common/dataTable/index";
import {
  examOne,
  examtwo,
  startTime,
  startTimeOne,
} from "../../../../core/common/selectoption/selectoption";
import PredefinedDateRanges from "../../../../core/common/datePicker";
import { TableData } from "../../../../core/data/interface";
import CommonSelect, { Option } from "../../../../core/common/commonSelect";
import { DatePicker } from "antd";
import dayjs from "dayjs";
import { all_routes } from "../../../router/all_routes";
import TooltipOption from "../../../../core/common/tooltipOption";

interface ExamType {
  id: string;
  examName: string;
  examDate: string;
  startTime: string;
  endTime: string;
  key: number;
}

const Exam = () => {
  const routes = all_routes;
  const [exams, setExams] = useState<ExamType[]>([]);
  const [modalIsOpen, setModalIsOpen] = useState(false);
  const openModal = () => setModalIsOpen(true);
  const [editingIndex, setEditingIndex] = useState<number | null>(null);
  const [newExam, setNewExam] = useState({ examName: '', examDate: '', startTime: 'Select', endTime: 'Select' });
  const dropdownMenuRef = useRef<HTMLDivElement | null>(null);
  const today = new Date();
  const year = today.getFullYear();
  const month = String(today.getMonth() + 1).padStart(2, "0");
  const day = String(today.getDate()).padStart(2, "0");
  const formattedDate = `${month}-${day}-${year}`;
  const defaultValue = dayjs(formattedDate);

  useEffect(() => {
    const fetchExams = async () => {
      try {
        const response = await fetch('YOUR_API_URL'); // Replace with your API endpoint
        const data = await response.json();
        setExams(data); // Assuming the response is in the expected format
      } catch (error) {
        console.error('Error fetching exam data:', error);
      }
    };

    fetchExams();
  }, []);

  const closeModal = () => {
    setEditingIndex(null);
    setNewExam({ examName: '', examDate: '', startTime: '', endTime: '' });
    setModalIsOpen(false);
  };

  const handleChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    const { name, value } = e.target;
    setNewExam((prev) => ({ ...prev, [name]: value }));
  };

  const handleDateChange = (date: dayjs.Dayjs | null) => {
    setNewExam((prev) => ({ ...prev, examDate: date?.format("DD MMM YYYY") || "" }));
  };

  const handleSubmit = (e: React.FormEvent<HTMLFormElement>) => {
    e.preventDefault();
    const updatedExams = editingIndex !== null
      ? exams.map((exam, index) => 
          index === editingIndex 
          ? { ...newExam, id: exam.id, key: exam.key } 
          : exam
        )
      : [...exams, { ...newExam, id: (exams.length + 1).toString(), key: exams.length + 1 }];

    setExams(updatedExams);
    closeModal();
  };

  const editExam = (exam: ExamType, index: number) => {
    setNewExam(exam);
    setEditingIndex(index);
    openModal();
  };

  const handleSelectChange = (option: Option | null, field: string) => {
    setNewExam((prev) => ({
      ...prev,
      [field]: option ? option.value : "",
    }));
  };

  const handleApplyClick = () => {
    if (dropdownMenuRef.current) {
      dropdownMenuRef.current.classList.remove("show");
    }
  };

  const getModalContainer = () => {
    const modalElement = document.getElementById("modal-datepicker");
    return modalElement ? modalElement : document.body;
  };

  const columns = [
    {
      title: "ID",
      dataIndex: "id",
      render: (text: string, record: any) => (
        <Link to="#" className="link-primary">{record.id}</Link>
      ),
      sorter: (a: any, b: any) => a.id.length - b.id.length,
    },
    {
      title: "Exam Name",
      dataIndex: "examName",
      sorter: (a: TableData, b: TableData) => a.examName.length - b.examName.length,
    },
    {
      title: "Exam Date",
      dataIndex: "examDate",
      sorter: (a: TableData, b: TableData) => a.examDate.length - b.examDate.length,
    },
    {
      title: "Start Time",
      dataIndex: "startTime",
      sorter: (a: TableData, b: TableData) => a.startTime.length - b.startTime.length,
    },
    {
      title: "End Time",
      dataIndex: "endTime",
      sorter: (a: TableData, b: TableData) => a.endTime.length - b.endTime.length,
    },
    {
      title: "Action",
      dataIndex: "action",
      render: (_, record, index) => (
        <div className="d-flex align-items-center">
          <div className="dropdown">
            <Link to="#" className="btn btn-white btn-icon btn-sm d-flex align-items-center justify-content-center rounded-circle p-0" data-bs-toggle="dropdown">
              <i className="ti ti-dots-vertical fs-14" />
            </Link>
            <ul className="dropdown-menu dropdown-menu-right p-3">
              <li>
                <Link className="dropdown-item rounded-1" to="#" onClick={() => editExam(record, index)}>
                  <i className="ti ti-edit-circle me-2" /> Edit
                </Link>
              </li>
              <li>
                <Link className="dropdown-item rounded-1" to="#" data-bs-toggle="modal" data-bs-target="#delete-modal">
                  <i className="ti ti-trash-x me-2" /> Delete
                </Link>
              </li>
            </ul>
          </div>
        </div>
      ),
    },
  ];

  return (
    <div>
      <div className="page-wrapper">
        <div className="content">
          <div className="d-md-flex d-block align-items-center justify-content-between mb-3">
            <div className="my-auto mb-2">
              <h3 className="page-title mb-1">Exam</h3>
              <nav>
                <ol className="breadcrumb mb-0">
                  <li className="breadcrumb-item"><Link to={routes.adminDashboard}>Dashboard</Link></li>
                  <li className="breadcrumb-item"><Link to="#">Academic </Link></li>
                  <li className="breadcrumb-item active" aria-current="page">Exam</li>
                </ol>
              </nav>
            </div>
            <div className="d-flex my-xl-auto right-content align-items-center flex-wrap">
              <TooltipOption />
              <div className="mb-2">
                <Link to="#" className="btn btn-primary" data-bs-toggle="modal" onClick={openModal}>
                  <i className="ti ti-square-rounded-plus-filled me-2" /> Add Exam
                </Link>
              </div>
            </div>
          </div>
          <div className="card">
            <div className="card-header d-flex align-items-center justify-content-between flex-wrap pb-0">
              <h4 className="mb-3">Exam List</h4>
              <div className="d-flex align-items-center flex-wrap">
                <div className="input-icon-start mb-3 me-2 position-relative">
                  <PredefinedDateRanges />
                </div>
                <div className="dropdown mb-3 me-2">
                  <Link to="#" className="btn btn-outline-light bg-white dropdown-toggle" data-bs-toggle="dropdown">
                    <i className="ti ti-filter me-2" /> Filter
                  </Link>
                  <div className="dropdown-menu drop-width" ref={dropdownMenuRef}>
                    <form>
                      <div className="d-flex align-items-center border-bottom p-3">
                        <h4>Filter</h4>
                      </div>
                      <div className="p-3 border-bottom pb-0">
                        <div className="row">
                          <div className="col-md-12">
                            <div className="mb-3">
                              <label className="form-label">Exam Name</label>
                              <CommonSelect className="select" options={examtwo} />
                            </div>
                          </div>
                          <div className="col-md-12">
                            <div className="mb-3">
                              <label className="form-label">Exam Date</label>
                              <CommonSelect className="select" options={examOne} />
                            </div>
                          </div>
                        </div>
                      </div>
                      <div className="p-3 d-flex align-items-center justify-content-end">
                        <Link to="#" className="btn btn-light me-3">Reset</Link>
                        <Link to="#" className="btn btn-primary" onClick={handleApplyClick}>Apply</Link>
                      </div>
                    </form>
                  </div>
                </div>
              </div>
            </div>
            <div className="card-body">
              <Table columns={columns} dataSource={exams} />
            </div>
          </div>
          {/* Modal for Add/Edit Exam */}
          {modalIsOpen && (
            <div className="modal fade show" id="add-edit-exam-modal" style={{ display: 'block' }} aria-modal="true">
              <div className="modal-dialog">
                <div className="modal-content">
                  <div className="modal-header">
                    <h5 className="modal-title">{editingIndex !== null ? "Edit Exam" : "Add Exam"}</h5>
                    <button type="button" className="btn-close" onClick={closeModal} aria-label="Close"></button>
                  </div>
                  <form onSubmit={handleSubmit}>
                    <div className="modal-body">
                      <div className="mb-3">
                        <label className="form-label">Exam Name</label>
                        <input type="text" className="form-control" name="examName" value={newExam.examName} onChange={handleChange} required />
                      </div>
                      <div className="mb-3">
                        <label className="form-label">Exam Date</label>
                        <DatePicker defaultValue={defaultValue} format="DD MMM YYYY" onChange={handleDateChange} />
                      </div>
                      <div className="mb-3">
                        <label className="form-label">Start Time</label>
                        <CommonSelect className="select" options={startTime} onChange={(option) => handleSelectChange(option, 'startTime')} />
                      </div>
                      <div className="mb-3">
                        <label className="form-label">End Time</label>
                        <CommonSelect className="select" options={startTimeOne} onChange={(option) => handleSelectChange(option, 'endTime')} />
                      </div>
                    </div>
                    <div className="modal-footer">
                      <button type="button" className="btn btn-secondary" onClick={closeModal}>Close</button>
                      <button type="submit" className="btn btn-primary">{editingIndex !== null ? "Update" : "Add"}</button>
                    </div>
                  </form>
                </div>
              </div>
            </div>
          )}
        </div>
      </div>
    </div>
  );
};

export default Exam;
