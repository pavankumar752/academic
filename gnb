import React, { useEffect, useState } from "react";
import Select from "react-select";

export type Option = {
  value: string;
  label: string;
};

export interface SelectProps {
  options: Option[];
  value?: Option; // Add this line
  defaultValue?: Option;
  className?: string;
  styles?: any; 
  onChange?: (option: Option | null) => void;
}

const CommonSelect: React.FC<SelectProps> = ({
  options,
  value, // Use value prop
  defaultValue,
  className,
  styles,
  onChange,
}) => {
  const [selectedOption, setSelectedOption] = useState<Option | null>(defaultValue || null);

  useEffect(() => {
    // Update local state when external value prop changes
    setSelectedOption(value || null);
  }, [value]);

  const handleChange = (option: Option | null) => {
    setSelectedOption(option);
    if (onChange) {
      onChange(option);
    }
  };

  return (
    <Select
      classNamePrefix="react-select"
      className={className}
      styles={styles}
      options={options}
      value={selectedOption}
      onChange={handleChange}
      placeholder="Select"
    />
  );
};

export default CommonSelect;





<CommonSelect
  className="select"
  options={startTime}
  value={newExam.startTime ? { value: newExam.startTime, label: newExam.startTime } : null} // Create an option object if startTime exists
  onChange={(option: Option | null) => {
    setNewExam({ ...newExam, startTime: option?.value || "" });
  }}
/>

<CommonSelect
  className="select"
  options={startTimeOne}
  value={newExam.endTime ? { value: newExam.endTime, label: newExam.endTime } : null} // Create an option object if endTime exists
  onChange={(option: Option | null) => {
    setNewExam({ ...newExam, endTime: option?.value || "" });
  }}
/>
