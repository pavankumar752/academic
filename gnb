import React, { useRef, useState } from "react";
import { Link } from "react-router-dom";
import Table from "../../../../core/common/dataTable/index";
import { exam as initialExamData } from "../../../../core/data/json/exam"; // Original exam data
import {
  examOne,
  examtwo,
  startTime,
  startTimeOne,
} from "../../../../core/common/selectoption/selectoption";
import PredefinedDateRanges from "../../../../core/common/datePicker";
import { TableData } from "../../../../core/data/interface";
import CommonSelect from "../../../../core/common/commonSelect";
import { DatePicker } from "antd";
import dayjs from "dayjs";
import { all_routes } from "../../../router/all_routes";
import TooltipOption from "../../../../core/common/tooltipOption";

const Exam = () => {
  const routes = all_routes;
  const dropdownMenuRef = useRef<HTMLDivElement | null>(null);
  const today = new Date();
  const formattedDate = dayjs(today).format("DD-MM-YYYY");
  
  const [data, setData] = useState(initialExamData);
  const [newExam, setNewExam] = useState({ examName: "", examDate: "", startTime: "", endTime: "" });
  const [isEditing, setIsEditing] = useState(false);
  const [currentExamId, setCurrentExamId] = useState<number | null>(null);

  const handleAddExam = () => {
    const newId = data.length ? Math.max(...data.map(exam => exam.id)) + 1 : 1;
    setData([...data, { ...newExam, id: newId }]);
    resetForm();
  };

  const handleEditExam = () => {
    setData(data.map(exam => (exam.id === currentExamId ? { ...exam, ...newExam } : exam)));
    resetForm();
  };

  const handleDeleteExam = (id: number) => {
    setData(data.filter(exam => exam.id !== id));
  };

  const resetForm = () => {
    setNewExam({ examName: "", examDate: "", startTime: "", endTime: "" });
    setIsEditing(false);
    setCurrentExamId(null);
  };

  const openEditModal = (exam: TableData) => {
    setNewExam({ examName: exam.examName, examDate: exam.examDate, startTime: exam.startTime, endTime: exam.endTime });
    setCurrentExamId(exam.id);
    setIsEditing(true);
  };

  const columns = [
    {
      title: "ID",
      dataIndex: "id",
      render: (text: string, record: any) => <Link to="#" className="link-primary">{record.id}</Link>,
    },
    {
      title: "Exam Name",
      dataIndex: "examName",
      sorter: (a: TableData, b: TableData) => a.examName.length - b.examName.length,
    },
    {
      title: "Exam Date",
      dataIndex: "examDate",
      sorter: (a: TableData, b: TableData) => a.examDate.length - b.examDate.length,
    },
    {
      title: "Start Time",
      dataIndex: "startTime",
      sorter: (a: TableData, b: TableData) => a.startTime.length - b.startTime.length,
    },
    {
      title: "End Time",
      dataIndex: "endTime",
      sorter: (a: TableData, b: TableData) => a.endTime.length - b.endTime.length,
    },
    {
      title: "Action",
      render: (text: string, record: any) => (
        <div className="d-flex align-items-center">
          <div className="dropdown">
            <Link to="#" className="btn btn-white btn-icon btn-sm" data-bs-toggle="dropdown">
              <i className="ti ti-dots-vertical fs-14" />
            </Link>
            <ul className="dropdown-menu dropdown-menu-right p-3">
              <li>
                <Link className="dropdown-item" to="#" onClick={() => openEditModal(record)}>
                  <i className="ti ti-edit-circle me-2" /> Edit
                </Link>
              </li>
              <li>
                <Link className="dropdown-item" to="#" onClick={() => handleDeleteExam(record.id)}>
                  <i className="ti ti-trash-x me-2" /> Delete
                </Link>
              </li>
            </ul>
          </div>
        </div>
      ),
    },
  ];

  return (
    <div>
      <div className="page-wrapper">
        <div className="content">
          {/* Page Header */}
          <div className="d-md-flex d-block align-items-center justify-content-between mb-3">
            <div className="my-auto mb-2">
              <h3 className="page-title mb-1">Exam</h3>
              <nav>
                <ol className="breadcrumb mb-0">
                  <li className="breadcrumb-item">
                    <Link to={routes.adminDashboard}>Dashboard</Link>
                  </li>
                  <li className="breadcrumb-item">
                    <Link to="#">Academic</Link>
                  </li>
                  <li className="breadcrumb-item active" aria-current="page">
                    Exam
                  </li>
                </ol>
              </nav>
            </div>
            <div className="d-flex my-xl-auto right-content align-items-center flex-wrap">
              <TooltipOption />
              <div className="mb-2">
                <Link
                  to="#"
                  className="btn btn-primary"
                  data-bs-toggle="modal"
                  data-bs-target="#add_exam"
                  onClick={() => resetForm()} // Reset the form when opening the modal
                >
                  <i className="ti ti-square-rounded-plus-filled me-2" />
                  Add Exam
                </Link>
              </div>
            </div>
          </div>
          {/* /Page Header */}
          <div className="card">
            <div className="card-header d-flex align-items-center justify-content-between flex-wrap pb-0">
              <h4 className="mb-3">Exam List</h4>
              <div className="d-flex align-items-center flex-wrap">
                <div className="input-icon-start mb-3 me-2 position-relative">
                  <PredefinedDateRanges />
                </div>
              </div>
            </div>
            <div className="card-body p-0 py-3">
              <Table columns={columns} dataSource={data} Selection={true} />
            </div>
          </div>
        </div>
      </div>

      {/* Add/Edit Modal */}
      <div className="modal fade" id="add_exam">
        <div className="modal-dialog modal-dialog-centered">
          <div className="modal-content">
            <div className="modal-header">
              <h4 className="modal-title">{isEditing ? "Edit Exam" : "Add Exam"}</h4>
              <button type="button" className="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <form onSubmit={e => { e.preventDefault(); isEditing ? handleEditExam() : handleAddExam(); }}>
              <div className="modal-body">
                <div className="mb-3">
                  <label className="form-label">Exam Name</label>
                  <input
                    type="text"
                    className="form-control"
                    value={newExam.examName}
                    onChange={e => setNewExam({ ...newExam, examName: e.target.value })}
                  />
                </div>
                <div className="mb-3">
                  <label className="form-label">Exam Date</label>
                  <DatePicker
                    className="form-control"
                    format="DD-MM-YYYY"
                    value={newExam.examDate ? dayjs(newExam.examDate) : null}
                    onChange={date => setNewExam({ ...newExam, examDate: date ? date.format("DD-MM-YYYY") : "" })}
                  />
                </div>
                <div className="mb-3">
                  <label className="form-label">Start Time</label>
                  <CommonSelect
                    className="select"
                    options={startTime}
                    defaultValue={startTime.find(option => option.value === newExam.startTime)}
                    onChange={option => setNewExam({ ...newExam, startTime: option?.value || "" })}
                  />
                </div>
                <div className="mb-0">
                  <label className="form-label">End Time</label>
                  <CommonSelect
                    className="select"
                    options={startTimeOne}
                    defaultValue={startTimeOne.find(option => option.value === newExam.endTime)}
                    onChange={option => setNewExam({ ...newExam, endTime: option?.value || "" })}
                  />
                </div>
              </div>
              <div className="modal-footer">
                <Link to="#" className="btn btn-light" data-bs-dismiss="modal">Cancel</Link>
                <button type="submit" className="btn btn-primary">{isEditing ? "Save Changes" : "Add Exam"}</button>
              </div>
            </form>
          </div>
        </div>
      </div>
      {/* Add/Edit Modal End */}
    </div>
  );
};

export default Exam;
