import React, { useRef, useState, useEffect } from "react";
import { Link } from "react-router-dom";
import Table from "../../../../core/common/dataTable/index";
import { exam } from "../../../../core/data/json/exam";
import {
  examOne,
  examtwo,
  startTime,
  startTimeOne,
} from "../../../../core/common/selectoption/selectoption";
import PredefinedDateRanges from "../../../../core/common/datePicker";
import { TableData } from "../../../../core/data/interface";
import CommonSelect, { Option } from "../../../../core/common/commonSelect";
import { DatePicker } from "antd";
import dayjs from "dayjs";
import { all_routes } from "../../../router/all_routes";
import TooltipOption from "../../../../core/common/tooltipOption";

interface ExamType {
  id: string;
  examName: string;
  examDate: string;
  startTime: string;
  endTime: string;
  key: number;
}

const Exam = () => {
  const routes = all_routes;
  const [exams, setExams] = useState<ExamType[]>([]);
  const [modalIsOpen, setModalIsOpen] = useState(false);
  const [editingIndex, setEditingIndex] = useState<number | null>(null);
  const [newExam, setNewExam] = useState({ examName: '', examDate: '', startTime: '', endTime: '' });
  const dropdownMenuRef = useRef<HTMLDivElement | null>(null);

  useEffect(() => {
    const storedExams = localStorage.getItem("exams");
    if (storedExams) {
      setExams(JSON.parse(storedExams));
    } else {
      setExams(exam); // Fallback to default exams if no data in local storage
    }
  }, []);

  useEffect(() => {
    localStorage.setItem("exams", JSON.stringify(exams));
  }, [exams]);

  const closeModal = () => {
    setEditingIndex(null);
    setNewExam({ examName: '', examDate: '', startTime: '', endTime: '' });
    setModalIsOpen(false);
  };

  const handleChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    const { name, value } = e.target;
    setNewExam((prev) => ({ ...prev, [name]: value }));
  };

  const handleDateChange = (date: dayjs.Dayjs | null) => {
    setNewExam((prev) => ({ ...prev, examDate: date?.format("DD-MM-YYYY") || "" }));
  };

  const handleSubmit = (e: React.FormEvent<HTMLFormElement>) => {
    e.preventDefault();

    if (!newExam.examName || !newExam.examDate || !newExam.startTime || !newExam.endTime) {
      alert("Please fill in all fields");
      return;
    }

    const updatedExams = editingIndex !== null
      ? exams.map((exam, index) =>
          index === editingIndex
            ? { ...newExam, id: exam.id, key: exam.key }
            : exam
        )
      : [...exams, { ...newExam, id: (exams.length + 1).toString(), key: exams.length + 1 }];

    setExams(updatedExams);
    closeModal();
  };

  const editExam = (exam: ExamType, index: number) => {
    setNewExam(exam);
    setEditingIndex(index);
    openModal();
  };

  const handleSelectChange = (option: Option | null, field: string) => {
    setNewExam((prev) => ({
      ...prev,
      [field]: option ? option.label : "",
    }));
  };

  const handleApplyClick = () => {
    if (dropdownMenuRef.current) {
      dropdownMenuRef.current.classList.remove("show");
    }
  };

  const getModalContainer = () => {
    const modalElement = document.getElementById("modal-datepicker");
    return modalElement ? modalElement : document.body;
  };

  const columns = [
    {
      title: "ID",
      dataIndex: "id",
      render: (text: string, record: any) => (
        <Link to="#" className="link-primary">{record.id}</Link>
      ),
      sorter: (a: any, b: any) => a.id.length - b.id.length,
    },
    {
      title: "Exam Name",
      dataIndex: "examName",
      sorter: (a: TableData, b: TableData) => a.examName.length - b.examName.length,
    },
    {
      title: "Exam Date",
      dataIndex: "examDate",
      sorter: (a: TableData, b: TableData) => a.examDate.length - b.examDate.length,
    },
    {
      title: "Start Time",
      dataIndex: "startTime",
      sorter: (a: TableData, b: TableData) => a.startTime.length - b.startTime.length,
    },
    {
      title: "End Time",
      dataIndex: "endTime",
      sorter: (a: TableData, b: TableData) => a.endTime.length - b.endTime.length,
    },
    {
      title: "Action",
      dataIndex: "action",
      render: (_, record, index) => (
        <div className="d-flex align-items-center">
          <div className="dropdown">
            <Link to="#" className="btn btn-white btn-icon btn-sm d-flex align-items-center justify-content-center rounded-circle p-0" data-bs-toggle="dropdown">
              <i className="ti ti-dots-vertical fs-14" />
            </Link>
            <ul className="dropdown-menu dropdown-menu-right p-3">
              <li>
                <Link className="dropdown-item rounded-1" to="#" onClick={() => editExam(record, index)}>
                  <i className="ti ti-edit-circle me-2" />
                  Edit
                </Link>
              </li>
              <li>
                <Link className="dropdown-item rounded-1" to="#" onClick={() => {
                  const updatedExams = exams.filter((_, i) => i !== index);
                  setExams(updatedExams);
                }}>
                  <i className="ti ti-trash-x me-2" />
                  Delete
                </Link>
              </li>
            </ul>
          </div>
        </div>
      ),
    },
  ];

  return (
    <div>
      <div className="page-wrapper">
        <div className="content">
          <div className="d-md-flex d-block align-items-center justify-content-between mb-3">
            <div className="my-auto mb-2">
              <h3 className="page-title mb-1">Exam</h3>
              <nav>
                <ol className="breadcrumb mb-0">
                  <li className="breadcrumb-item"><Link to={routes.adminDashboard}>Dashboard</Link></li>
                  <li className="breadcrumb-item"><Link to="#">Academic</Link></li>
                  <li className="breadcrumb-item active" aria-current="page">Exam</li>
                </ol>
              </nav>
            </div>
            <div className="d-flex my-xl-auto right-content align-items-center flex-wrap">
              <TooltipOption />
              <div className="mb-2">
                <Link to="#" className="btn btn-primary" onClick={() => setModalIsOpen(true)}>
                  <i className="ti ti-square-rounded-plus-filled me-2" />
                  Add Exam
                </Link>
              </div>
            </div>
          </div>
          <div className="card">
            <div className="card-header d-flex align-items-center justify-content-between flex-wrap pb-0">
              <h4 className="mb-3">Exam List</h4>
              <div className="d-flex align-items-center flex-wrap">
                <div className="input-icon-start mb-3 me-2 position-relative">
                  <PredefinedDateRanges />
                </div>
                <div className="dropdown mb-3 me-2">
                  <Link to="#" className="btn btn-outline-light bg-white dropdown-toggle" data-bs-toggle="dropdown">
                    <i className="ti ti-filter me-2" />
                    Filter
                  </Link>
                  <div className="dropdown-menu drop-width" ref={dropdownMenuRef}>
                    <form>
                      <div className="d-flex align-items-center border-bottom p-3">
                        <h4>Filter</h4>
                      </div>
                      <div className="p-3 border-bottom pb-0">
                        <div className="row">
                          <div className="col-md-12">
                            <div className="mb-3">
                              <label className="form-label">Exam Name</label>
                              <CommonSelect className="select" options={examtwo} />
                            </div>
                          </div>
                          <div className="col-md-12">
                            <div className="mb-3">
                              <label className="form-label">Exam Date</label>
                              <CommonSelect className="select" options={examOne} />
                            </div>
                          </div>
                        </div>
                      </div>
                      <div className="p-3 d-flex align-items-center justify-content-end">
                        <Link to="#" className="btn btn-light me-3">Reset</Link>
                        <Link to="#" className="btn btn-primary" onClick={handleApplyClick}>Apply</Link>
                      </div>
                    </form>
                  </div>
                </div>
                <div className="dropdown mb-3">
                  <Link to="#" className="btn btn-outline-light bg-white dropdown-toggle" data-bs-toggle="dropdown">
                    <i className="ti ti-sort-ascending-2 me-2" />
                    Sort by A-Z
                  </Link>
                  <ul className="dropdown-menu p-3">
                    <li><Link to="#" className="dropdown-item rounded-1 active">Ascending</Link></li>
                    <li><Link to="#" className="dropdown-item rounded-1">Descending</Link></li>
                    <li><Link to="#" className="dropdown-item rounded-1">Recently Viewed</Link></li>
                    <li><Link to="#" className="dropdown-item rounded-1">Recently Added</Link></li>
                  </ul>
                </div>
              </div>
            </div>
            <div className="card-body p-0 py-3">
              <Table columns={columns} dataSource={exams} Selection={true} />
            </div>
          </div>
        </div>
      </div>
      <>
        <div className="modal fade" id="add_exam">
          <div className="modal-dialog modal-dialog-centered">
            <div className="modal-content">
              <div className="modal-header">
                <h4 className="modal-title">Add Exam</h4>
                <button type="button" className="btn-close custom-btn-close" onClick={closeModal}>
                  <i className="ti ti-x" />
                </button>
              </div>
              <form onSubmit={handleSubmit}>
                <div className="modal-body">
                  <div className="row">
                    <div className="col-md-12">
                      <div className="mb-3">
                        <label className="form-label">Exam Name</label>
                        <input type="text" className="form-control" onChange={handleChange} value={newExam.examName} name="examName" />
                      </div>
                      <div className="mb-3">
                        <label className="form-label">Exam Date</label>
                        <div className="date-pic">
                          <DatePicker
                            className="form-control datetimepicker"
                            format={{
                              format: "DD-MM-YYYY",
                              type: "mask",
                            }}
                            name="examDate"
                            onChange={handleDateChange}
                            value={newExam.examDate ? dayjs(newExam.examDate, "DD-MM-YYYY") : null}
                            getPopupContainer={getModalContainer}
                            placeholder="16 May 2024"
                          />
                          <span className="cal-icon">
                            <i className="ti ti-calendar" />
                          </span>
                        </div>
                      </div>
                      <div className="mb-3">
                        <label className="form-label">Start Time</label>
                        <CommonSelect className="select" options={startTime} onChange={(option) => handleSelectChange(option, "startTime")} value={startTime.find((option) => option.label === newExam.startTime)} />
                      </div>
                      <div className="mb-0">
                        <label className="form-label">End Time</label>
                        <CommonSelect
                          className="select"
                          options={startTimeOne}
                          onChange={(option) => handleSelectChange(option, "endTime")}
                          value={startTimeOne.find((option) => option.label === newExam.endTime)}
                        />
                      </div>
                    </div>
                  </div>
                </div>
                <div className="modal-footer">
                  <Link to="#" className="btn btn-light me-2" onClick={closeModal}>Cancel</Link>
                  <button type="submit" className="btn btn-primary">Add Exam</button>
                </div>
              </form>
            </div>
          </div>
        </div>
        {/* Edit Exam */}
        <div className="modal fade" id="edit_exam">
          <div className="modal-dialog modal-dialog-centered">
            <div className="modal-content">
              <div className="modal-header">
                <h4 className="modal-title">Edit Exam</h4>
                <button type="button" className="btn-close custom-btn-close" onClick={closeModal}>
                  <i className="ti ti-x" />
                </button>
              </div>
              <form onSubmit={handleSubmit}>
                <div className="modal-body">
                  <div className="row">
                    <div className="col-md-12">
                      <div className="mb-3">
                        <label className="form-label">Exam Name</label>
                        <input type="text" className="form-control" onChange={handleChange} value={newExam.examName} name="examName" />
                      </div>
                      <div className="mb-3">
                        <label className="form-label">Exam Date</label>
                        <div className="date-pic">
                          <DatePicker
                            className="form-control datetimepicker"
                            format={{
                              format: "DD-MM-YYYY",
                              type: "mask",
                            }}
                            onChange={handleDateChange}
                            value={newExam.examDate ? dayjs(newExam.examDate, "DD-MM-YYYY") : null}
                            getPopupContainer={getModalContainer}
                            placeholder="16 May 2024"
                          />
                          <span className="cal-icon">
                            <i className="ti ti-calendar" />
                          </span>
                        </div>
                      </div>
                      <div className="mb-3">
                        <label className="form-label">Start Time</label>
                        <CommonSelect className="select" options={startTime} onChange={(option) => handleSelectChange(option, "startTime")} value={startTime.find((option) => option.label === newExam.startTime)} />
                      </div>
                      <div className="mb-0">
                        <label className="form-label">End Time</label>
                        <CommonSelect
                          className="select"
                          options={startTimeOne}
                          onChange={(option) => handleSelectChange(option, "endTime")}
                          value={startTimeOne.find((option) => option.label === newExam.endTime)}
                        />
                      </div>
                    </div>
                  </div>
                </div>
                <div className="modal-footer">
                  <Link to="#" className="btn btn-light me-2" onClick={closeModal}>Cancel</Link>
                  <button type="submit" className="btn btn-primary">Save Changes</button>
                </div>
              </form>
            </div>
          </div>
        </div>
        {/* Delete Modal */}
        <div className="modal fade" id="delete-modal">
          <div className="modal-dialog modal-dialog-centered">
            <div className="modal-content">
              <form>
                <div className="modal-body text-center">
                  <span className="delete-icon">
                    <i className="ti ti-trash-x" />
                  </span>
                  <h4>Confirm Deletion</h4>
                  <p>You want to delete all the marked items, this can't be undone once you delete.</p>
                  <div className="d-flex justify-content-center">
                    <Link to="#" className="btn btn-light me-3" data-bs-dismiss="modal">Cancel</Link>
                    <Link to="#" className="btn btn-danger">Yes, Delete</Link>
                  </div>
                </div>
              </form>
            </div>
          </div>
        </div>
      </>
    </div>
  );
};

export default Exam;
