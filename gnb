import React, { useRef, useState, useEffect } from "react";
import Select from "react-select";
import { Link } from "react-router-dom";
import Table from "../../../../core/common/dataTable/index"; // Adjust this import based on your actual structure
import { all_routes } from "../../../router/all_routes"; // Adjust this import based on your actual structure
import TooltipOption from "../../../../core/common/tooltipOption"; // Adjust this import based on your actual structure

interface Option {
  value: string;
  label: string;
}

interface Exam1 {
  subject: Option | null;
  section: Option | null;
  examDate: Option | null;
  startTime: Option | null;
  endTime: Option | null;
  duration: Option | null;
  roomNo: Option | null;
  maxMarks: Option | null;
  minMarks: Option | null;
  class: string;
  examName: Option | null;
  key: number;
}

const subjects: Option[] = [
  { value: 'math', label: 'Mathematics' },
  { value: 'sci', label: 'Science' },
  { value: 'eng', label: 'English' },
];

const classSection: Option[] = [
  { value: 'A', label: 'A' },
  { value: 'B', label: 'B' },
];

const examNames: Option[] = [
  { value: 'midterm', label: 'Midterm Exam' },
  { value: 'final', label: 'Final Exam' },
];

const startTime: Option[] = [
  { value: '09:00', label: '09:00 AM' },
  { value: '10:00', label: '10:00 AM' },
];

const startTimeOne: Option[] = [
  { value: '11:00', label: '11:00 AM' },
  { value: '12:00', label: '12:00 PM' },
];

const durationOne: Option[] = [
  { value: '60', label: '60 min' },
  { value: '90', label: '90 min' },
];

const maxMark: Option[] = [
  { value: '100', label: '100' },
  { value: '50', label: '50' },
];

const minMark: Option[] = [
  { value: '40', label: '40' },
  { value: '20', label: '20' },
];

const examOne: Option[] = [
  { value: '2024-10-01', label: 'October 1, 2024' },
  { value: '2024-10-02', label: 'October 2, 2024' },
];

const roomNumbers: Option[] = [
  { value: '101', label: 'Room 101' },
  { value: '102', label: 'Room 102' },
];

const ExamSchedule = () => {
  const [data, setData] = useState<Exam1[]>([]);
  const [formValues, setFormValues] = useState<Exam1>({
    subject: null,
    examDate: null,
    startTime: null,
    section: null,
    endTime: null,
    duration: null,
    roomNo: null,
    maxMarks: null,
    minMarks: null,
    class: "",
    examName: null,
    key: 0,
  });

  useEffect(() => {
    const storedExams = localStorage.getItem('examSchedule');
    if (storedExams) {
      const exams = JSON.parse(storedExams);
      setData(exams);
    }
  }, []);

  const handleInputChange = (name: string, value: string | Option | null) => {
    setFormValues((prevValues) => ({
      ...prevValues,
      [name]: value,
    }));
  };

  const handleSubmit = (e: React.FormEvent) => {
    e.preventDefault();
    console.log("Form Values Before Submit:", formValues); // Debugging line

    const newData: Exam1 = { ...formValues, key: data.length };
    console.log("New Data Being Added:", newData); // Debugging line

    const updatedData = [...data, newData];
    setData(updatedData);
    localStorage.setItem("examSchedule", JSON.stringify(updatedData));

    // Reset form values after adding
    setFormValues({
      subject: null,
      examDate: null,
      startTime: null,
      endTime: null,
      duration: null,
      roomNo: null,
      maxMarks: null,
      minMarks: null,
      examName: null,
      class: "",
      section: null,
      key: 0,
    });
  };

  const columns = [
    {
      title: "Subject",
      dataIndex: "subject",
      render: (text: string, record: Exam1) => (
        <Link to="#" className="link-primary">
          {record.subject?.label || "N/A"}
        </Link>
      ),
    },
    {
      title: "Exam Date",
      dataIndex: "examDate",
      render: (text: string, record: Exam1) => record.examDate?.label || "N/A",
    },
    {
      title: "Start Time",
      dataIndex: "startTime",
      render: (text: string, record: Exam1) => record.startTime?.label || "N/A",
    },
    {
      title: "End Time",
      dataIndex: "endTime",
      render: (text: string, record: Exam1) => record.endTime?.label || "N/A",
    },
    {
      title: "Duration",
      dataIndex: "duration",
      render: (text: string, record: Exam1) => record.duration?.label || "N/A",
    },
    {
      title: "Room No",
      dataIndex: "roomNo",
      render: (text: string, record: Exam1) => record.roomNo?.label || "N/A",
    },
    {
      title: "Max Mark",
      dataIndex: "maxMarks",
      render: (text: string, record: Exam1) => record.maxMarks?.label || "N/A",
    },
    {
      title: "Min Mark",
      dataIndex: "minMarks",
      render: (text: string, record: Exam1) => record.minMarks?.label || "N/A",
    },
    {
      title: "Action",
      dataIndex: "action",
      render: () => (
        <div className="d-flex align-items-center">
          <div className="dropdown">
            <Link
              to="#"
              className="btn btn-white btn-icon btn-sm"
              data-bs-toggle="dropdown"
              aria-expanded="false"
            >
              <i className="ti ti-dots-vertical fs-14" />
            </Link>
            <ul className="dropdown-menu dropdown-menu-right p-3">
              <li>
                <Link className="dropdown-item rounded-1" to="#">
                  <i className="ti ti-edit-circle me-2" /> Edit
                </Link>
              </li>
              <li>
                <Link className="dropdown-item rounded-1" to="#">
                  <i className="ti ti-trash-x me-2" /> Delete
                </Link>
              </li>
            </ul>
          </div>
        </div>
      ),
    },
  ];

  return (
    <div>
      <div className="page-wrapper">
        <div className="content">
          <div className="d-md-flex d-block align-items-center justify-content-between mb-3">
            <h3 className="page-title mb-1">Exam Schedule</h3>
            <TooltipOption />
            <Link to="#" className="btn btn-primary" data-bs-toggle="modal" data-bs-target="#add_exam_schedule">
              <i className="ti ti-square-rounded-plus-filled me-2" /> Add Exam Schedule
            </Link>
          </div>
          <div className="card">
            <div className="card-header d-flex align-items-center justify-content-between flex-wrap pb-0">
              <h4 className="mb-3">Exam Schedule</h4>
            </div>
            <div className="card-body p-0 py-3">
              <Table columns={columns} dataSource={data} />
            </div>
          </div>
        </div>
      </div>

      <div className="modal fade" id="add_exam_schedule">
        <div className="modal-dialog modal-dialog-centered modal-xl">
          <div className="modal-content">
            <div className="modal-header">
              <h4 className="modal-title">Add Exam Schedule</h4>
              <button type="button" className="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <form onSubmit={handleSubmit}>
              <div className="modal-body">
                <div className="row">
                  <div className="col-md-4 mb-3">
                    <label className="form-label">Class</label>
                    <input
                      type="text"
                      className="form-control"
                      value={formValues.class}
                      onChange={(e) => handleInputChange("class", e.target.value)}
                    />
                  </div>
                  <div className="col-md-4 mb-3">
                    <label className="form-label">Section</label>
                    <Select
                      className="select"
                      options={classSection}
                      value={formValues.section}
                      onChange={(selectedOption) => handleInputChange("section", selectedOption)}
                    />
                  </div>
                  <div className="col-md-4 mb-3">
                    <label className="form-label">Exam Name</label>
                    <Select
                      className="select"
                      options={examNames}
                      value={formValues.examName}
                      onChange={(selectedOption) => handleInputChange("examName", selectedOption)}
                    />
                  </div>
                  <div className="col-md-4 mb-3">
                    <label className="form-label">Start Time</label>
                    <Select
                      className="select"
                      options={startTime}
                      value={formValues.startTime}
                      onChange={(selectedOption) => handleInputChange("startTime", selectedOption)}
                    />
                  </div>
                  <div className="col-md-4 mb-3">
                    <label className="form-label">End Time</label>
                    <Select
                      className="select"
                      options={startTimeOne}
                      value={formValues.endTime}
                      onChange={(selectedOption) => handleInputChange("endTime", selectedOption)}
                    />
                  </div>
                  <div className="col-md-4 mb-3">
                    <label className="form-label">Duration (min)</label>
                    <Select
                      className="select"
                      options={durationOne}
                      value={formValues.duration}
                      onChange={(selectedOption) => handleInputChange("duration", selectedOption)}
                    />
                  </div>
                  <div className="col-md-4 mb-3">
                    <label className="form-label">Exam Date</label>
                    <Select
                      className="select"
                      options={examOne}
                      value={formValues.examDate}
                      onChange={(selectedOption) => handleInputChange("examDate", selectedOption)}
                    />
                  </div>
                  <div className="col-md-4 mb-3">
                    <label className="form-label">Room No</label>
                    <Select
                      className="select"
                      options={roomNumbers}
                      value={formValues.roomNo}
                      onChange={(selectedOption) => handleInputChange("roomNo", selectedOption)}
                    />
                  </div>
                  <div className="col-md-4 mb-3">
                    <label className="form-label">Max Marks</label>
                    <Select
                      className="select"
                      options={maxMark}
                      value={formValues.maxMarks}
                      onChange={(selectedOption) => handleInputChange("maxMarks", selectedOption)}
                    />
                  </div>
                  <div className="col-md-4 mb-3">
                    <label className="form-label">Min Marks</label>
                    <Select
                      className="select"
                      options={minMark}
                      value={formValues.minMarks}
                      onChange={(selectedOption) => handleInputChange("minMarks", selectedOption)}
                    />
                  </div>
                  <div className="col-md-4 mb-3">
                    <label className="form-label">Subject</label>
                    <Select
                      className="select"
                      options={subjects}
                      value={formValues.subject}
                      onChange={(selectedOption) => handleInputChange("subject", selectedOption)}
                    />
                  </div>
                </div>
              </div>
              <div className="modal-footer">
                <button type="button" className="btn btn-secondary" data-bs-dismiss="modal">Close</button>
                <button type="submit" className="btn btn-primary">Add Exam Schedule</button>
              </div>
            </form>
          </div>
        </div>
      </div>
    </div>
  );
};

export default ExamSchedule;
