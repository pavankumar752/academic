 const routes = all_routes;
  const [data, setData] = useState<any []>([]);
  const dropdownMenuRef = useRef<HTMLDivElement | null>(null);
  const today = new Date();
  const year = today.getFullYear();
  const month = String(today.getMonth() + 1).padStart(2, "0"); // Month is zero-based, so we add 1
  const day = String(today.getDate()).padStart(2, "0");
  const formattedDate = `${month}-${day}-${year}`;
  const defaultValue = dayjs(formattedDate);
  const jwtToken = Cookies.get('authToken');
  const apiUrl = 'http://10.10.8.14:8008/exams/exam_exam/';
  useEffect(() => {
    const fetchData = async () => {
      if (!jwtToken) {
        console.error('No authentication token found');
        return;
      }
  
      const options = {
        method: 'GET',
        headers: {
          'Content-Type': 'application/json',
          Authorization: `Bearer ${jwtToken}`,
        },
      };
  
      try {
        const response = await fetch(apiUrl, options);
        if (!response.ok) {
          const errorText = await response.text();
          throw new Error(`Network response was not ok: ${response.status} ${response.statusText} - ${errorText}`);
        }
  
        const data1 = await response.json();
        const formattedData = data1.results.map((item: { exam_id: any; exam_type_name: any; academic_year_name: any; name: any; start_date: any; end_date: any; orientation_names: any; class_names: any; }) => ({
          exam_id: item.exam_id,
          exam_type_name: item.exam_type_name,
          academic_year_name: item.academic_year_name,
          name: item.name,
          start_date: item.start_date,
          end_date: item.end_date,
          orientation_names: item.orientation_names,
          class_names: item.class_names,
        }));
        debugger;
        setData(formattedData);
        console.log(data); // Log the formatted data
      } catch (error) {
        console.error('There has been a problem with your fetch operation:', error);
      }
    };
  
    fetchData();
  }, [jwtToken]);
