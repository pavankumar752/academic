import React, { useEffect, useState } from "react";
import { Link } from "react-router-dom";
import Table from "../../../../core/common/dataTable/index";
import { exam } from "../../../../core/data/json/exam";
import {
  examOne,
  examtwo,
  startTime,
  startTimeOne,
} from "../../../../core/common/selectoption/selectoption";
import PredefinedDateRanges from "../../../../core/common/datePicker";
import CommonSelect, { Option } from "../../../../core/common/commonSelect";
import { DatePicker } from "antd";
import dayjs from "dayjs";
import { all_routes } from "../../../router/all_routes";
import TooltipOption from "../../../../core/common/tooltipOption";

const Exam = () => {
  const routes = all_routes;

  const [data, setData] = useState(() => {
    const storedExams = localStorage.getItem("exams");
    return storedExams ? JSON.parse(storedExams) : exam;
  });

  const [examName, setExamName] = useState("");
  const [examDate, setExamDate] = useState(dayjs());
  const [startTimeValue, setStartTimeValue] = useState<Option | null>(startTime[0]);
  const [endTimeValue, setEndTimeValue] = useState<Option | null>(startTimeOne[0]);
  const [editingExamId, setEditingExamId] = useState<string | null>(null); // State to track the exam being edited

  const handleAddOrUpdateExam = () => {
    const newExam = {
      id: editingExamId || Math.random().toString(36).substr(2, 9),
      examName,
      examDate: examDate.format("DD-MM-YYYY"),
      startTime: startTimeValue ? startTimeValue.value : "",
      endTime: endTimeValue ? endTimeValue.value : "",
      key: Date.now(),
    };

    if (editingExamId) {
      // Update existing exam
      const updatedExams = data.map((exam) => (exam.id === editingExamId ? newExam : exam));
      setData(updatedExams);
    } else {
      // Add new exam
      const updatedExams = [...data, newExam];
      setData(updatedExams);
    }

    localStorage.setItem("exams", JSON.stringify(updatedExams));
    resetForm();
  };

  const resetForm = () => {
    setExamName("");
    setExamDate(dayjs());
    setStartTimeValue(startTime[0]);
    setEndTimeValue(startTimeOne[0]);
    setEditingExamId(null); // Reset the editing ID
  };

  const handleEditExam = (examToEdit: any) => {
    setExamName(examToEdit.examName);
    setExamDate(dayjs(examToEdit.examDate, "DD-MM-YYYY"));
    setStartTimeValue(startTime.find(option => option.value === examToEdit.startTime) || startTime[0]);
    setEndTimeValue(startTimeOne.find(option => option.value === examToEdit.endTime) || startTimeOne[0]);
    setEditingExamId(examToEdit.id); // Set the ID of the exam being edited
  };

  const columns = [
    {
      title: "ID",
      dataIndex: "id",
      render: (text: string, record: any) => (
        <Link to="#" className="link-primary">
          {record.id}
        </Link>
      ),
    },
    {
      title: "Exam Name",
      dataIndex: "examName",
    },
    {
      title: "Exam Date",
      dataIndex: "examDate",
    },
    {
      title: "Start Time",
      dataIndex: "startTime",
    },
    {
      title: "End Time",
      dataIndex: "endTime",
    },
    {
      title: "Action",
      render: (text: string, record: any) => (
        <Link to="#" className="btn btn-info btn-sm" onClick={() => handleEditExam(record)}>
          Edit
        </Link>
      ),
    },
  ];

  return (
    <div>
      <div className="page-wrapper">
        <div className="content">
          <div className="d-md-flex d-block align-items-center justify-content-between mb-3">
            <h3 className="page-title mb-1">Exam</h3>
            <Link to="#" className="btn btn-primary" data-bs-toggle="modal" data-bs-target="#add_exam">
              Add Exam
            </Link>
          </div>

          <div className="card">
            <div className="card-body p-0 py-3">
              <Table columns={columns} dataSource={data} />
            </div>
          </div>
        </div>
      </div>

      {/* Add/Edit Exam Modal */}
      <div className="modal fade" id="add_exam">
        <div className="modal-dialog modal-dialog-centered">
          <div className="modal-content">
            <div className="modal-header">
              <h4 className="modal-title">{editingExamId ? "Edit Exam" : "Add Exam"}</h4>
              <button type="button" className="btn-close" data-bs-dismiss="modal"></button>
            </div>
            <form onSubmit={(e) => {
              e.preventDefault();
              handleAddOrUpdateExam();
            }}>
              <div className="modal-body">
                <div className="mb-3">
                  <label className="form-label">Exam Name</label>
                  <input type="text" className="form-control" value={examName} onChange={(e) => setExamName(e.target.value)} required />
                </div>
                <div className="mb-3">
                  <label className="form-label">Exam Date</label>
                  <DatePicker
                    className="form-control"
                    format="DD-MM-YYYY"
                    value={examDate}
                    onChange={(date) => setExamDate(date)}
                  />
                </div>
                <div className="mb-3">
                  <label className="form-label">Start Time</label>
                  <CommonSelect className="select" options={startTime} value={startTimeValue?.value} onChange={setStartTimeValue} />
                </div>
                <div className="mb-3">
                  <label className="form-label">End Time</label>
                  <CommonSelect className="select" options={startTimeOne} value={endTimeValue?.value} onChange={setEndTimeValue} />
                </div>
              </div>
              <div className="modal-footer">
                <button type="button" className="btn btn-light" data-bs-dismiss="modal">Cancel</button>
                <button type="submit" className="btn btn-primary" data-bs-dismiss="modal">
                  {editingExamId ? "Update Exam" : "Add Exam"}
                </button>
              </div>
            </form>
          </div>
        </div>
      </div>
    </div>
  );
};

export default Exam;
