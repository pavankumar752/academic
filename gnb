import React, { useRef, useState, useEffect} from "react";
import { Link } from "react-router-dom";

import Table from "../../../../core/common/dataTable/index";
import { exam } from "../../../../core/data/json/exam";
import {
  examOne,
  examtwo,
  startTime,
  startTimeOne,
} from "../../../../core/common/selectoption/selectoption";
import PredefinedDateRanges from "../../../../core/common/datePicker";
import { TableData } from "../../../../core/data/interface";
import CommonSelect, {Option} from "../../../../core/common/commonSelect";
import { DatePicker } from "antd";
import dayjs from "dayjs";
import { all_routes } from "../../../router/all_routes";
import TooltipOption from "../../../../core/common/tooltipOption";

interface ExamType {
  exam_id: string;
  exam_type_name: string;
  academic_year_name: string;
  name:string
  start_date: string;
  end_date: string;
  key: number;
}

const Exam = () => {
  const routes = all_routes;
  const data = exam;
  useEffect(() => {
    const fetchExams = async () => {
      try {
        const response = await fetch('http://10.10.8.14:8008/exams/exam_exam/');
        
        if (!response.ok) {
          throw new Error(`HTTP error! status: ${response.status}`);
        }
        
        const data = await response.json();
        
        // Log the data to check its structure
        console.log(data);
        
        // Set exams to the array received from the API
        setExams(Array.isArray(data) ? data : []); // Ensure it's an array
      } catch (error) {
        if (error instanceof Error) {
          console.error('Error fetching exam data:', error.message);
        } else {
          console.error('Unexpected error:', error);
        }
      }
    };
    
    

    fetchExams();
  }, []);
  const [exams,setExams] = useState<ExamType[]>([]);
  const [modalIsOpen, setModalIsOpen] = useState(false);
  const openModal = () => setModalIsOpen(true);
  const [editingIndex, setEditingIndex] = useState<number | null>(null);
  const [newExam, setNewExam] = useState({exam_type_name: 'Select',academic_year_name:'Select',name:'', start_date:'', end_date:''})
  const dropdownMenuRef = useRef<HTMLDivElement | null>(null);
  const today = new Date();
  const year = today.getFullYear();
  const month = String(today.getMonth() + 1).padStart(2, "0"); // Month is zero-based, so we add 1
  const day = String(today.getDate()).padStart(2, "0");
  const formattedDate = `${month}-${day}-${year}`;
  const defaultValue = dayjs(formattedDate);
  const [examToDelete, setExamToDelete] = useState<ExamType | null>(null);                

  const closeModal = () => {
    setEditingIndex(null);
    setModalIsOpen(false);
  }

  const handleChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    const { name, value } = e.target;
    setNewExam((prev) => ({ ...prev, [name]: value }));
  };

  const handleDateChange = (date: dayjs.Dayjs | null, field: string) => {
    setNewExam((prev) => ({ ...prev, [field]: date?.format("DD MMM YYYY") || "" }));
  };

  const handleSubmit = (e: React.FormEvent<HTMLFormElement>) => {
    e.preventDefault();

    console.log(newExam);
    // Check if all required fields are filled
  
    const updatedExams = editingIndex !== null
      ? exams.map((exam, index) => 
          index === editingIndex 
          ? { ...newExam, exam_id: exam.exam_id, key: exam.key } // Retain original key when editing
          : exam
        )
      : [...exams, { ...newExam, exam_id: (exams.length + 1).toString(), key: exams.length + 1 }]; // Generate ID and key for new exams

      console.log(updatedExams)
    setExams(updatedExams);
    setNewExam({exam_type_name: 'Select',academic_year_name:'Select',name:'', start_date:'', end_date:''})
    closeModal();
  };

  const editExam = (exam: ExamType, index: number) => {
    setNewExam(exam);
    setEditingIndex(index);
    openModal();
  };

  const handleSelectChange = (option: Option | null, field: string) => {
    setNewExam((prev) => ({
      ...prev,
      [field]: option ? option.value : "",
    }));
  };

  const handleDelete = () => {
    if (examToDelete) {
      setExams(exams.filter(exam => exam.exam_id !== examToDelete.exam_id));
      setExamToDelete(null);
    }
  };
  
  const handleApplyClick = () => {
    if (dropdownMenuRef.current) {
      dropdownMenuRef.current.classList.remove("show");
    }
  };
  const getModalContainer = () => {
    const modalElement = document.getElementById("modal-datepicker");
    return modalElement ? modalElement : document.body; // Fallback to document.body if modalElement is null
  };
  const columns = [
    {
      title: "Exam Id",
      dataIndex: "exam_id",
      render: (text: string, record: any, index: number) => (
        <>
          <Link to="#" className="link-primary">
            {record.exam_id}
          </Link>
        </>
      ),
      sorter: (a: any, b: any) => a.exam_id.length - b.exam_id.length,
    },
    {
      title: "Exam Type",
      dataIndex: "exam_type_name",
      sorter: (a: TableData, b: TableData) =>
        a.examName.length - b.examName.length,
    },
    {
      title: "Academic Year",
      dataIndex: "academic_year_name",
      sorter: (a: TableData, b: TableData) =>
        a.examDate.length - b.examDate.length,
    },
    {
      title: "Exam Name",
      dataIndex: "name",
      sorter: (a: TableData, b: TableData) =>
        a.name.length - b.name.length,
    },
    {
      title: "Start Date",
      dataIndex: "start_date",
      sorter: (a: TableData, b: TableData) =>
        a.start_date.length - b.start_date.length,
    },
    {
      title: "End Date",
      dataIndex: "end_date",
      sorter: (a: TableData, b: TableData) =>
        a.end_date.length - b.end_date.length,
    },
    {
      title: "Action",
      dataIndex: "action",
      render: (text: string, record: ExamType, index: number) => (
        <>
          <div className="d-flex align-items-center">
            <div className="dropdown">
              <Link
                to="#"
                className="btn btn-white btn-icon btn-sm d-flex align-items-center justify-content-center rounded-circle p-0"
                data-bs-toggle="dropdown"
                aria-expanded="false"
              >
                <i className="ti ti-dots-vertical fs-14" />
              </Link>
              <ul className="dropdown-menu dropdown-menu-right p-3">
                <li>
                  <button
                    className="dropdown-item rounded-1"
                    onClick={() => editExam(record, index)}
                    data-bs-toggle="modal"
                    data-bs-target="#edit_exam"
                  >
                    <i className="ti ti-edit-circle me-2" />
                    Edit
                  </button>
                </li>
                <li>
                  <button
                    className="dropdown-item rounded-1"
                    onClick={() => setExamToDelete(record)}
                    data-bs-toggle="modal"
                    data-bs-target="#delete-modal"
                  >
                    <i className="ti ti-trash-x me-2" />
                    Delete
                  </button>
                </li>
              </ul>
            </div>
          </div>
        </>
      ),
    },
  ];
  return (
    <div>
      <div className="page-wrapper">
        <div className="content">
          {/* Page Header */}
          <div className="d-md-flex d-block align-items-center justify-content-between mb-3">
            <div className="my-auto mb-2">
              <h3 className="page-title mb-1">Exam</h3>
              <nav>
                <ol className="breadcrumb mb-0">
                  <li className="breadcrumb-item">
                    <Link to={routes.adminDashboard}>Dashboard</Link>
                  </li>
                  <li className="breadcrumb-item">
                    <Link to="#">Academic </Link>
                  </li>
                  <li className="breadcrumb-item active" aria-current="page">
                    Exam
                  </li>
                </ol>
              </nav>
            </div>
            <div className="d-flex my-xl-auto right-content align-items-center flex-wrap">
            <TooltipOption />
              <div className="mb-2">
                <Link
                  to="#"
                  className="btn btn-primary"
                  data-bs-toggle="modal"
                  data-bs-target="#add_exam"
                  onClick={openModal}
                >
                  <i className="ti ti-square-rounded-plus-filled me-2" />
                  Add Exam
                </Link>
              </div>
            </div>
          </div>
          {/* /Page Header */}
          {/* Guardians List */}
          <div className="card">
            <div className="card-header d-flex align-items-center justify-content-between flex-wrap pb-0">
              <h4 className="mb-3">Exam List</h4>
              <div className="d-flex align-items-center flex-wrap">
                <div className="input-icon-start mb-3 me-2 position-relative">
                  <PredefinedDateRanges />
                </div>
                <div className="dropdown mb-3 me-2">
                  <Link
                    to="#"
                    className="btn btn-outline-light bg-white dropdown-toggle"
                    data-bs-toggle="dropdown"
                    data-bs-auto-close="outside"
                  >
                    <i className="ti ti-filter me-2" />
                    Filter
                  </Link>
                  <div
                    className="dropdown-menu drop-width"
                    ref={dropdownMenuRef}
                  >
                    <form>
                      <div className="d-flex align-items-center border-bottom p-3">
                        <h4>Filter</h4>
                      </div>
                      <div className="p-3 border-bottom pb-0">
                        <div className="row">
                          <div className="col-md-12">
                            <div className="mb-3">
                              <label className="form-label">Exam Name</label>
                              <CommonSelect
                                className="select"
                                options={examtwo}
                              />
                            </div>
                          </div>
                          <div className="col-md-12">
                            <div className="mb-3">
                              <label className="form-label">Exam Date</label>
                              <CommonSelect
                                className="select"
                                options={examOne}
                              />
                            </div>
                          </div>
                        </div>
                      </div>
                      <div className="p-3 d-flex align-items-center justify-content-end">
                        <Link to="#" className="btn btn-light me-3">
                          Reset
                        </Link>
                        <Link
                          to="#"
                          className="btn btn-primary"
                          onClick={handleApplyClick}
                        >
                          Apply
                        </Link>
                      </div>
                    </form>
                  </div>
                </div>
                <div className="dropdown mb-3">
                  <Link
                    to="#"
                    className="btn btn-outline-light bg-white dropdown-toggle"
                    data-bs-toggle="dropdown"
                  >
                    <i className="ti ti-sort-ascending-2 me-2" />
                    Sort by A-Z
                  </Link>
                  <ul className="dropdown-menu p-3">
                    <li>
                      <Link to="#" className="dropdown-item rounded-1 active">
                        Ascending
                      </Link>
                    </li>
                    <li>
                      <Link to="#" className="dropdown-item rounded-1">
                        Descending
                      </Link>
                    </li>
                    <li>
                      <Link to="#" className="dropdown-item rounded-1">
                        Recently Viewed
                      </Link>
                    </li>
                    <li>
                      <Link to="#" className="dropdown-item rounded-1">
                        Recently Added
                      </Link>
                    </li>
                  </ul>
                </div>
              </div>
            </div>
            <div className="card-body p-0 py-3">
              {/* Guardians List */}
              <Table columns={columns} dataSource={exams} Selection={true} />

              {/* /Guardians List */}
            </div>
          </div>
          {/* /Guardians List */}
        </div>
      </div>
      <>
        {/* Add Exam */}
        <div className="modal fade" id="add_exam">
          <div className="modal-dialog modal-dialog-centered">
            <div className="modal-content">
              <div className="modal-header">
                <h4 className="modal-title">Add Exam</h4>
                <button
                  type="button"
                  className="btn-close custom-btn-close"
                  data-bs-dismiss="modal"
                  aria-label="Close"
                >
                  <i className="ti ti-x" />
                </button>
              </div>
              <form onSubmit={handleSubmit} >
                <div className="modal-body">
                  <div className="row">
                    <div className="col-md-12">
                    <div className="mb-3">
                        <label className="form-label">Exam Type</label>
                        <CommonSelect 
                         className="select"
                         options={startTime}
                         onChange={(option) => handleSelectChange(option, "exam_type_name")}
                         value={newExam.exam_type_name}/>
                      </div>
                      <div className="mb-3">
                        <label className="form-label">Academic Year</label>
                        <CommonSelect 
                         className="select"
                         options={startTime}
                         onChange={(option) => handleSelectChange(option, "academic_year_name")}
                         value={newExam.academic_year_name}/>
                      </div>
                      <div className="mb-3">
                        <label className="form-label">Exam Name</label>
                        <input type="text" className="form-control" onChange={handleChange} value={newExam.name} name = "name"/>
                      </div>
                      <div className="mb-3">
                        <label className="form-label">Start Date</label>
                        <div className="date-pic">
                          <DatePicker
                            className="form-control datetimepicker"
                            format={{
                              format: "DD MMM YYYY",
                              type: "mask",
                            }}
                            name = "start_date"
                            onChange={(date) => handleDateChange(date, "start_date")}
                            value={newExam.start_date ? dayjs(newExam.start_date, "DD MMM YYYY") : null}
                            getPopupContainer={getModalContainer}
                            defaultValue={defaultValue}
                            placeholder="16 May 2024"
                          />
                          <span className="cal-icon">
                            <i className="ti ti-calendar" />
                          </span>
                        </div>
                      </div>
                      <div className="mb-3">
                        <label className="form-label">End Date</label>
                        <div className="date-pic">
                          <DatePicker
                            className="form-control datetimepicker"
                            format={{
                              format: "DD MMM YYYY",
                              type: "mask",
                            }}
                            name = "end_date"
                            onChange={(date) => handleDateChange(date, "end_date")}
                            value={newExam.end_date ? dayjs(newExam.end_date, "DD MMM YYYY") : null}
                            getPopupContainer={getModalContainer}
                            defaultValue={defaultValue}
                            placeholder="16 May 2024"
                          />
                          <span className="cal-icon">
                            <i className="ti ti-calendar" />
                          </span>
                        </div>
                      </div>
                    </div>
                  </div>
                </div>
                <div className="modal-footer">
                  <Link
                    to="#"
                    className="btn btn-light me-2"
                    data-bs-dismiss="modal"
                  >
                    Cancel
                  </Link>
                  <button  className="btn btn-primary"  type="submit" data-bs-dismiss="modal">
                    Add Exam
                  </button>
                </div>
              </form>
            </div>
          </div>
        </div>
        {/* Add Exam */}
        {/* Edit Exam */}
        <div className="modal fade" id="edit_exam">
          <div className="modal-dialog modal-dialog-centered">
            <div className="modal-content">
              <div className="modal-header">
                <h4 className="modal-title">Edit Exam</h4>
                <button
                  type="button"
                  className="btn-close custom-btn-close"
                  data-bs-dismiss="modal"
                  aria-label="Close"
                >
                  <i className="ti ti-x" />
                </button>
              </div>
              <form onSubmit={handleSubmit} >
                <div className="modal-body">
                  <div className="row">
                    <div className="col-md-12">
                    <div className="mb-3">
                        <label className="form-label">Exam Type</label>
                        <CommonSelect 
                         className="select"
                         options={startTime}
                         onChange={(option) => handleSelectChange(option, "exam_type_name")}
                         value={newExam.exam_type_name}/>
                      </div>
                      <div className="mb-3">
                        <label className="form-label">Academic Year</label>
                        <CommonSelect 
                         className="select"
                         options={startTime}
                         onChange={(option) => handleSelectChange(option, "academic_year_name")}
                         value={newExam.academic_year_name}/>
                      </div>
                      <div className="mb-3">
                        <label className="form-label">Exam Name</label>
                        <input type="text" className="form-control" onChange={handleChange} value={newExam.name} name = "name"/>
                      </div>
                      <div className="mb-3">
                        <label className="form-label">Start Date</label>
                        <div className="date-pic">
                          <DatePicker
                            className="form-control datetimepicker"
                            format={{
                              format: "DD MMM YYYY",
                              type: "mask",
                            }}
                            name = "start_date"
                            onChange={(date) => handleDateChange(date, "start_date")}
                            value={newExam.start_date ? dayjs(newExam.start_date, "DD MMM YYYY") : null}
                            getPopupContainer={getModalContainer}
                            //defaultValue={defaultValue}
                            placeholder="16 May 2024"
                          />
                          <span className="cal-icon">
                            <i className="ti ti-calendar" />
                          </span>
                        </div>
                      </div>
                      <div className="mb-3">
                        <label className="form-label">End Date</label>
                        <div className="date-pic">
                          <DatePicker
                            className="form-control datetimepicker"
                            format={{
                              format: "DD MMM YYYY",
                              type: "mask",
                            }}
                            name = "end_date"
                            onChange={(date) => handleDateChange(date, "end_date")}
                            value={newExam.end_date ? dayjs(newExam.end_date, "DD MMM YYYY") : null}
                            getPopupContainer={getModalContainer}
                            //defaultValue={defaultValue}
                            placeholder="16 May 2024"
                          />
                          <span className="cal-icon">
                            <i className="ti ti-calendar" />
                          </span>
                        </div>
                      </div>
                    </div>
                  </div>
                </div>
                <div className="modal-footer">
                  <Link
                    to="#"
                    className="btn btn-light me-2"
                    data-bs-dismiss="modal"
                  >
                    Cancel
                  </Link>
                  <button  className="btn btn-primary"  type="submit" data-bs-dismiss="modal">
                    Add Exam
                  </button>
                </div>
              </form>
            </div>
          </div>
        </div>
        {/* Edit Exam */}
        {/* Delete Modal */}
        <div className="modal fade" id="delete-modal">
          <div className="modal-dialog modal-dialog-centered">
            <div className="modal-content">
              <form onSubmit={(e) => { e.preventDefault(); handleDelete(); }}>
                <div className="modal-body text-center">
                  <span className="delete-icon">
                    <i className="ti ti-trash-x" />
                  </span>
                  <h4>Confirm Deletion</h4>
                  <p>
                    You want to delete all the marked items, this cant be undone
                    once you delete.
                  </p>
                  <div className="d-flex justify-content-center">
                    <Link
                      to="#"
                      className="btn btn-light me-3"
                      data-bs-dismiss="modal"
                    >
                      Cancel
                    </Link>
                    <button type = "submit"  data-bs-dismiss="modal" className="btn btn-danger">
                      Yes, Delete
                    </button>
                  </div>
                </div>
              </form>
            </div>
          </div>
        </div>
        {/* /Delete Modal */}
      </>
    </div>
  );
};

export default Exam;
