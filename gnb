import React from "react";
import { Link } from "react-router-dom";
import CommonSelect from "./CommonSelect"; // Adjust the import based on your file structure

// Define types for the data records
interface GradeRecord {
  id: string;
  grade: string;
  percentage: string;
  gradePoints: string;
  status: string;
}

// Define the props for the Modal component
type ModalProps = {
  id: string;
  title: string;
  children: React.ReactNode;
};

// Modal Component
const Modal: React.FC<ModalProps> = ({ id, title, children }) => (
  <div className="modal fade" id={id}>
    <div className="modal-dialog modal-dialog-centered">
      <div className="modal-content">
        <div className="modal-header">
          <h5 className="modal-title">{title}</h5>
          <button type="button" className="btn-close" data-bs-dismiss="modal" aria-label="Close" />
        </div>
        <div className="modal-body">{children}</div>
      </div>
    </div>
  </div>
);

// Define the props for the FormSelect component
type FormSelectProps = {
  label: string;
  options: Array<{ label: string; value: string }>; // Adjust this based on your option structure
};

// FormSelect Component
const FormSelect: React.FC<FormSelectProps> = ({ label, options }) => (
  <div className="mb-3">
    <label className="form-label">{label}</label>
    <CommonSelect className="select" options={options} />
  </div>
);

// Grade Component
const Grade: React.FC = () => {
  // Example data for the grades
  const data: GradeRecord[] = [
    { id: "1", grade: "A", percentage: "90%", gradePoints: "4.0", status: "Active" },
    { id: "2", grade: "B", percentage: "80%", gradePoints: "3.0", status: "Active" },
    // Add more records as needed
  ];

  // Define columns for the table
  const columns = [
    {
      title: "ID",
      dataIndex: "id",
      render: (text: string, record: GradeRecord) => (
        <Link to="#" className="link-primary">
          {record.id}
        </Link>
      ),
      sorter: (a: GradeRecord, b: GradeRecord) => a.id.length - b.id.length,
    },
    {
      title: "Grade",
      dataIndex: "grade",
      sorter: (a: GradeRecord, b: GradeRecord) => a.grade.length - b.grade.length,
    },
    {
      title: "Percentage",
      dataIndex: "percentage",
      sorter: (a: GradeRecord, b: GradeRecord) => a.percentage.length - b.percentage.length,
    },
    {
      title: "Grade Points",
      dataIndex: "gradePoints",
      sorter: (a: GradeRecord, b: GradeRecord) => a.gradePoints.length - b.gradePoints.length,
    },
    {
      title: "Status",
      dataIndex: "status",
      render: () => (
        <span className="badge badge-soft-success">
          <i className="ti ti-circle-filled fs-5 me-1" />Active
        </span>
      ),
      sorter: (a: GradeRecord, b: GradeRecord) => a.status.length - b.status.length,
    },
    {
      title: "Action",
      dataIndex: "action",
      render: () => (
        <div className="d-flex align-items-center">
          <div className="dropdown">
            {/* Dropdown content for actions */}
            <button className="btn btn-secondary dropdown-toggle" type="button" id="actionDropdown" data-bs-toggle="dropdown" aria-expanded="false">
              Actions
            </button>
            <ul className="dropdown-menu" aria-labelledby="actionDropdown">
              <li><Link className="dropdown-item" to="#">Edit</Link></li>
              <li><Link className="dropdown-item" to="#">Delete</Link></li>
            </ul>
          </div>
        </div>
      ),
    },
  ];

  return (
    <div>
      <h1>Grades</h1>
      {/* Render your table component here, passing in the data and columns */}
      {/* For example: <Table data={data} columns={columns} /> */}
      {/* Replace with your actual table rendering code */}
    </div>
  );
};

export default Grade;
