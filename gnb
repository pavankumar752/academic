import React, { useState } from "react";

// Define the Option interface
interface Option {
  label: string;
  value: string;
}

// Define the Exam1 interface
interface Exam1 {
  subject: Option | null;
  examDate: Option | null;
  startTime: Option | null;
  endTime: Option | null;
  duration: Option | null;
  roomNo: Option | null;
  maxMarks: Option | null;
  minMarks: Option | null;
  class: Option | null;
  section: Option | null;
  examName: Option | null;
  key: number;
}

const ExamSchedule: React.FC = () => {
  const [formValues, setFormValues] = useState<Exam1>({
    subject: null,
    examDate: null,
    startTime: null,
    endTime: null,
    duration: null,
    roomNo: null,
    maxMarks: null,
    minMarks: null,
    class: null,
    section: null,
    examName: null,
    key: 0,
  });

  const handleInputChange = (name: string, value: Option | null) => {
    setFormValues((prevValues) => ({
      ...prevValues,
      [name]: value,
    }));
  };

  // Example dropdown options (replace with your actual data)
  const classSection: Option[] = [
    { label: "Class A", value: "classA" },
    { label: "Class B", value: "classB" },
  ];

  const examNames: Option[] = [
    { label: "Midterm", value: "midterm" },
    { label: "Final", value: "final" },
  ];

  const subjects: Option[] = [
    { label: "Math", value: "math" },
    { label: "Science", value: "science" },
  ];

  const roomNumbers: Option[] = [
    { label: "Room 101", value: "room101" },
    { label: "Room 102", value: "room102" },
  ];

  const handleSubmit = (event: React.FormEvent) => {
    event.preventDefault();
    // Handle form submission
    console.log(formValues);
  };

  return (
    <div>
      <h1>Exam Schedule</h1>
      <form onSubmit={handleSubmit}>
        {/* Subject Select */}
        <div>
          <label>Subject</label>
          <select
            className="form-control"
            name="subject"
            value={formValues.subject ? formValues.subject.value : ""}
            onChange={(e) => {
              const selectedOption = subjects.find(option => option.value === e.target.value) || null;
              handleInputChange("subject", selectedOption);
            }}
          >
            <option value="">Select Subject</option>
            {subjects.map(option => (
              <option key={option.value} value={option.value}>
                {option.label}
              </option>
            ))}
          </select>
        </div>

        {/* Class Select */}
        <div>
          <label>Class</label>
          <select
            className="form-control"
            name="class"
            value={formValues.class ? formValues.class.value : ""}
            onChange={(e) => {
              const selectedOption = classSection.find(option => option.value === e.target.value) || null;
              handleInputChange("class", selectedOption);
            }}
          >
            <option value="">Select Class</option>
            {classSection.map(option => (
              <option key={option.value} value={option.value}>
                {option.label}
              </option>
            ))}
          </select>
        </div>

        {/* Section Select */}
        <div>
          <label>Section</label>
          <select
            className="form-control"
            name="section"
            value={formValues.section ? formValues.section.value : ""}
            onChange={(e) => {
              const selectedOption = classSection.find(option => option.value === e.target.value) || null;
              handleInputChange("section", selectedOption);
            }}
          >
            <option value="">Select Section</option>
            {classSection.map(option => (
              <option key={option.value} value={option.value}>
                {option.label}
              </option>
            ))}
          </select>
        </div>

        {/* Exam Name Select */}
        <div>
          <label>Exam Name</label>
          <select
            className="form-control"
            name="examName"
            value={formValues.examName ? formValues.examName.value : ""}
            onChange={(e) => {
              const selectedOption = examNames.find(option => option.value === e.target.value) || null;
              handleInputChange("examName", selectedOption);
            }}
          >
            <option value="">Select Exam Name</option>
            {examNames.map(option => (
              <option key={option.value} value={option.value}>
                {option.label}
              </option>
            ))}
          </select>
        </div>

        {/* Exam Date Select */}
        <div>
          <label>Exam Date</label>
          <input
            type="date"
            className="form-control"
            name="examDate"
            value={formValues.examDate ? formValues.examDate.value : ""}
            onChange={(e) => {
              handleInputChange("examDate", { label: e.target.value, value: e.target.value });
            }}
          />
        </div>

        {/* Start Time Select */}
        <div>
          <label>Start Time</label>
          <input
            type="time"
            className="form-control"
            name="startTime"
            value={formValues.startTime ? formValues.startTime.value : ""}
            onChange={(e) => {
              handleInputChange("startTime", { label: e.target.value, value: e.target.value });
            }}
          />
        </div>

        {/* End Time Select */}
        <div>
          <label>End Time</label>
          <input
            type="time"
            className="form-control"
            name="endTime"
            value={formValues.endTime ? formValues.endTime.value : ""}
            onChange={(e) => {
              handleInputChange("endTime", { label: e.target.value, value: e.target.value });
            }}
          />
        </div>

        {/* Duration Select */}
        <div>
          <label>Duration (in minutes)</label>
          <input
            type="number"
            className="form-control"
            name="duration"
            value={formValues.duration ? formValues.duration.value : ""}
            onChange={(e) => {
              handleInputChange("duration", { label: e.target.value, value: e.target.value });
            }}
          />
        </div>

        {/* Room Number Select */}
        <div>
          <label>Room No</label>
          <select
            className="form-control"
            name="roomNo"
            value={formValues.roomNo ? formValues.roomNo.value : ""}
            onChange={(e) => {
              const selectedOption = roomNumbers.find(option => option.value === e.target.value) || null;
              handleInputChange("roomNo", selectedOption);
            }}
          >
            <option value="">Select Room No</option>
            {roomNumbers.map(option => (
              <option key={option.value} value={option.value}>
                {option.label}
              </option>
            ))}
          </select>
        </div>

        {/* Max Marks Select */}
        <div>
          <label>Max Marks</label>
          <input
            type="number"
            className="form-control"
            name="maxMarks"
            value={formValues.maxMarks ? formValues.maxMarks.value : ""}
            onChange={(e) => {
              handleInputChange("maxMarks", { label: e.target.value, value: e.target.value });
            }}
          />
        </div>

        {/* Min Marks Select */}
        <div>
          <label>Min Marks</label>
          <input
            type="number"
            className="form-control"
            name="minMarks"
            value={formValues.minMarks ? formValues.minMarks.value : ""}
            onChange={(e) => {
              handleInputChange("minMarks", { label: e.target.value, value: e.target.value });
            }}
          />
        </div>

        <button type="submit">Submit</button>
      </form>
    </div>
  );
};

export default ExamSchedule;
