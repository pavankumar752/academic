import React, { useRef, useState, useEffect} from "react";
import { Link } from "react-router-dom";
import axios from 'axios';
import Table from "../../../../core/common/dataTable/index";
import { exam } from "../../../../core/data/json/exam";
import {
  examOne,
  examtwo,
  startTime,
  startTimeOne,
} from "../../../../core/common/selectoption/selectoption";
import PredefinedDateRanges from "../../../../core/common/datePicker";
import { TableData } from "../../../../core/data/interface";
import CommonSelect, {Option} from "../../../../core/common/commonSelect";
import { DatePicker } from "antd";
import dayjs from "dayjs";
import { all_routes } from "../../../router/all_routes";
import TooltipOption from "../../../../core/common/tooltipOption";
import Cookies from "js-cookie";

interface ExamType {
  exam_id: string;
  exam_type_name: string;
  academic_year_name: string;
  name:string
  start_date: string;
  end_date: string;
  key: number;
}

const Exam = () => {
  const routes = all_routes;
  const data = exam;

  const jwtToken = Cookies.get('authToken');
  const apiUrl = 'http://10.10.8.14:8008/exams/exam_exam/';
  async function fetchData() {
    if (!jwtToken) {
      console.error('No authentication token found');
      return;
    }
  
    // Retrieve the CSRF token from the meta tag
  
    const options = {
      method: 'GET',
      headers: {
        'Content-Type': 'application/json',
        Authorization: `Bearer ${jwtToken}`,
      },
    };
  
    try {
      const response = await fetch(apiUrl, options);
  
      if (!response.ok) {
        const errorText = await response.text();
        throw new Error(`Network response was not ok: ${response.status} ${response.statusText} - ${errorText}`);
      }
  
      const data = await response.json();
      //@ts-ignore
      const formattedData = data.results.map(item => ({
        exam_id: item.exam_id,
        exam_type_name: item.exam_type_name,
        academic_year_name: item.academic_year_name,
        name: item.name,
        start_date: item.start_date,
        end_date: item.end_date,
      }));
      //@ts-ignore
      this.setState({ exams: formattedData });
      
    } catch (error) {
      console.error('There has been a problem with your fetch operation:', error);
    }
  }
  
  fetchData();
  


  const [exams,setExams] = useState<ExamType[]>([]);
  const [modalIsOpen, setModalIsOpen] = useState(false);
  const openModal = () => setModalIsOpen(true);
  const [editingIndex, setEditingIndex] = useState<number | null>(null);
  const [newExam, setNewExam] = useState({exam_type_name: 'Select',academic_year_name:'Select',name:'', start_date:'', end_date:''})
  const dropdownMenuRef = useRef<HTMLDivElement | null>(null);
  const today = new Date();
  const year = today.getFullYear();
  const month = String(today.getMonth() + 1).padStart(2, "0"); // Month is zero-based, so we add 1
  const day = String(today.getDate()).padStart(2, "0");
  const formattedDate = `${month}-${day}-${year}`;
  const defaultValue = dayjs(formattedDate);
  const [examToDelete, setExamToDelete] = useState<ExamType | null>(null);             

  const closeModal = () => {
    setEditingIndex(null);
    setModalIsOpen(false);
  }

  const handleChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    const { name, value } = e.target;
    setNewExam((prev) => ({ ...prev, [name]: value }));
  };

  const handleDateChange = (date: dayjs.Dayjs | null, field: string) => {
    setNewExam((prev) => ({ ...prev, [field]: date?.format("DD MMM YYYY") || "" }));
  };

  const handleSubmit = (e: React.FormEvent<HTMLFormElement>) => {
    e.preventDefault();

    console.log(newExam);
    // Check if all required fields are filled
  
    const updatedExams = editingIndex !== null
      ? exams.map((exam, index) => 
          index === editingIndex 
          ? { ...newExam, exam_id: exam.exam_id, key: exam.key } // Retain original key when editing
          : exam
        )
      : [...exams, { ...newExam, exam_id: (exams.length + 1).toString(), key: exams.length + 1 }]; // Generate ID and key for new exams

      console.log(updatedExams)
    setExams(updatedExams);
    setNewExam({exam_type_name: 'Select',academic_year_name:'Select',name:'', start_date:'', end_date:''})
    closeModal();
  };

  const editExam = (exam: ExamType, index: number) => {
    setNewExam(exam);
    setEditingIndex(index);
    openModal();
  };

  const handleSelectChange = (option: Option | null, field: string) => {
    setNewExam((prev) => ({
      ...prev,
      [field]: option ? option.value : "",
    }));
  };

  const handleDelete = () => {
    if (examToDelete) {
      setExams(exams.filter(exam => exam.exam_id !== examToDelete.exam_id));
      setExamToDelete(null);
    }
  };
  
  const handleApplyClick = () => {
    if (dropdownMenuRef.current) {
      dropdownMenuRef.current.classList.remove("show");
    }
  };
  const getModalContainer = () => {
    const modalElement = document.getElementById("modal-datepicker");
    return modalElement ? modalElement : document.body; // Fallback to document.body if modalElement is null
  };
