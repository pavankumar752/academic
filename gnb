import React, { useRef, useState, useEffect } from "react";
import { Link } from "react-router-dom";
import Table from "../../../../core/common/dataTable/index"; // Ensure this component supports rendering a table
import { exam } from "../../../../core/data/json/exam"; // If this is a mock, you can remove it
import CommonSelect, { Option } from "../../../../core/common/commonSelect";
import { DatePicker } from "antd";
import dayjs from "dayjs";
import Cookies from "js-cookie";

interface ExamType {
  exam_id: string;
  exam_type_name: string;
  academic_year_name: string;
  name: string;
  start_date: string;
  end_date: string;
}

const Exam = () => {
  const apiUrl = 'http://10.10.8.14:8008/exams/exam_exam/';
  const [exams, setExams] = useState<ExamType[]>([]);
  const [modalIsOpen, setModalIsOpen] = useState(false);
  const [editingIndex, setEditingIndex] = useState<number | null>(null);
  const [newExam, setNewExam] = useState({ exam_type_name: 'Select', academic_year_name: 'Select', name: '', start_date: '', end_date: '' });
  const [examToDelete, setExamToDelete] = useState<ExamType | null>(null);
  const jwtToken = Cookies.get('authToken');

  useEffect(() => {
    const fetchData = async () => {
      if (!jwtToken) {
        console.error('No authentication token found');
        return;
      }

      const options = {
        method: 'GET',
        headers: {
          'Content-Type': 'application/json',
          Authorization: `Bearer ${jwtToken}`,
        },
      };

      try {
        const response = await fetch(apiUrl, options);
        if (!response.ok) {
          const errorText = await response.text();
          throw new Error(`Network response was not ok: ${response.status} ${response.statusText} - ${errorText}`);
        }

        const data = await response.json();
        const formattedData = data.results.map(item => ({
          exam_id: item.exam_id,
          exam_type_name: item.exam_type_name,
          academic_year_name: item.academic_year_name,
          name: item.name,
          start_date: item.start_date,
          end_date: item.end_date,
        }));

        setExams(formattedData);
      } catch (error) {
        console.error('There has been a problem with your fetch operation:', error);
      }
    };

    fetchData();
  }, [jwtToken]);

  const closeModal = () => {
    setEditingIndex(null);
    setModalIsOpen(false);
  };

  const handleChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    const { name, value } = e.target;
    setNewExam(prev => ({ ...prev, [name]: value }));
  };

  const handleDateChange = (date: dayjs.Dayjs | null, field: string) => {
    setNewExam(prev => ({ ...prev, [field]: date?.format("DD MMM YYYY") || "" }));
  };

  const handleSubmit = (e: React.FormEvent<HTMLFormElement>) => {
    e.preventDefault();
    const updatedExams = editingIndex !== null
      ? exams.map((exam, index) =>
          index === editingIndex
            ? { ...newExam, exam_id: exam.exam_id } // Keep the original ID
            : exam
        )
      : [...exams, { ...newExam, exam_id: (exams.length + 1).toString() }]; // Generate new ID

    setExams(updatedExams);
    setNewExam({ exam_type_name: 'Select', academic_year_name: 'Select', name: '', start_date: '', end_date: '' });
    closeModal();
  };

  const editExam = (exam: ExamType, index: number) => {
    setNewExam(exam);
    setEditingIndex(index);
    setModalIsOpen(true);
  };

  const handleDelete = () => {
    if (examToDelete) {
      setExams(exams.filter(exam => exam.exam_id !== examToDelete.exam_id));
      setExamToDelete(null);
    }
  };

  return (
    <div>
      <h1>Exams List</h1>
      <Table>
        <thead>
          <tr>
            <th>Exam Type</th>
            <th>Academic Year</th>
            <th>Name</th>
            <th>Start Date</th>
            <th>End Date</th>
            <th>Actions</th>
          </tr>
        </thead>
        <tbody>
          {exams.map((exam) => (
            <tr key={exam.exam_id}>
              <td>{exam.exam_type_name}</td>
              <td>{exam.academic_year_name}</td>
              <td>{exam.name}</td>
              <td>{exam.start_date}</td>
              <td>{exam.end_date}</td>
              <td>
                <button onClick={() => editExam(exam, exams.indexOf(exam))}>Edit</button>
                <button onClick={() => setExamToDelete(exam)}>Delete</button>
              </td>
            </tr>
          ))}
        </tbody>
      </Table>

      {modalIsOpen && (
        <div>
          <h2>{editingIndex !== null ? 'Edit Exam' : 'Add Exam'}</h2>
          <form onSubmit={handleSubmit}>
            <input name="exam_type_name" value={newExam.exam_type_name} onChange={handleChange} placeholder="Exam Type" required />
            <input name="academic_year_name" value={newExam.academic_year_name} onChange={handleChange} placeholder="Academic Year" required />
            <input name="name" value={newExam.name} onChange={handleChange} placeholder="Name" required />
            <DatePicker onChange={(date) => handleDateChange(date, 'start_date')} placeholder="Start Date" />
            <DatePicker onChange={(date) => handleDateChange(date, 'end_date')} placeholder="End Date" />
            <button type="submit">Submit</button>
            <button type="button" onClick={closeModal}>Cancel</button>
          </form>
        </div>
      )}

      {examToDelete && (
        <div>
          <p>Are you sure you want to delete this exam?</p>
          <button onClick={handleDelete}>Yes</button>
          <button onClick={() => setExamToDelete(null)}>No</button>
        </div>
      )}
    </div>
  );
};

export default Exam;
