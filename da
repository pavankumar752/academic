// DualListBox.js
import React, { useState } from 'react';
import styled from 'styled-components';

const Container = styled.div`
  display: flex;
  justify-content: center;
  align-items: center;
  height: 100vh;  // Full viewport height
`;

const Box = styled.div`
  display: flex;
  flex-direction: column;
  width: 400px;
`;

const List = styled.ul`
  list-style-type: none;
  padding: 0;
  border: 1px solid #ccc;
  height: 200px;  // Fixed height
  overflow-y: auto;
  margin: 0;  // Remove default margin
`;

const ListItem = styled.li`
  padding: 8px;
  cursor: pointer;
  background-color: ${({ selected }) => (selected ? '#007bff' : 'white')};
  color: ${({ selected }) => (selected ? 'white' : 'black')};

  &:hover {
    background-color: #f0f0f0;
  }
`;

const ButtonContainer = styled.div`
  display: flex;
  flex-direction: column;
  justify-content: center;
`;

const DualListBox = ({ items }) => {
  const [leftList, setLeftList] = useState(items);
  const [rightList, setRightList] = useState([]);

  const moveItem = (item, sourceList, setSourceList, targetList, setTargetList) => {
    setTargetList([...targetList, item]);
    setSourceList(sourceList.filter(i => i !== item));
  };

  const handleDoubleClick = (item) => {
    if (leftList.includes(item)) {
      moveItem(item, leftList, setLeftList, rightList, setRightList);
    } else {
      moveItem(item, rightList, setRightList, leftList, setLeftList);
    }
  };

  return (
    <Container>
      <Box>
        <h2>Permissions</h2>
        <div style={{ display: 'flex', justifyContent: 'space-between' }}>
          <List>
            {leftList.map((item, index) => (
              <ListItem key={index} onDoubleClick={() => handleDoubleClick(item)}>
                {item}
              </ListItem>
            ))}
          </List>
          <ButtonContainer>
            <button onClick={() => rightList.forEach(item => moveItem(item, rightList, setRightList, leftList, setLeftList))}>Move All Left</button>
            <button onClick={() => leftList.forEach(item => moveItem(item, leftList, setLeftList, rightList, setRightList))}>Move All Right</button>
          </ButtonContainer>
          <List>
            {rightList.map((item, index) => (
              <ListItem key={index} onDoubleClick={() => handleDoubleClick(item)}>
                {item}
              </ListItem>
            ))}
          </List>
        </div>
      </Box>
    </Container>
  );
};

export default DualListBox;
